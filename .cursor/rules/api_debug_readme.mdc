---
globs: webui/api/*.py,webui/api/**/*.py
alwaysApply: false
---
# SOTD Pipeline API Debug Logging

This document explains how to use the enhanced debug logging features for the SOTD Pipeline API.

## Overview

The API now includes comprehensive logging that writes to both files and stdout, making it easier to debug issues and monitor API performance.

## Log Files

All logs are stored in the `webui/logs/` directory:

- **`api_debug.log`** - Detailed debug information (DEBUG level)
- **`api_errors.log`** - Error-level messages only
- Console output - INFO level messages for immediate feedback

## Starting the API with Debug Logging

### Option 1: Using the server manager (Recommended)
```bash
cd webui
./scripts/manage-servers.sh start
```

### Option 2: Direct uvicorn command
```bash
cd webui
ENVIRONMENT=test DEBUG=true PYTHONPATH=. python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
```

## Monitoring Logs

### Real-time log monitoring using server manager
```bash
cd webui
# View API debug logs
./scripts/manage-servers.sh logs api-debug

# View API error logs
./scripts/manage-servers.sh logs api-errors

# View backend server logs
./scripts/manage-servers.sh logs backend
```

### View specific log files directly
```bash
# View debug logs
tail -f webui/logs/api_debug.log

# View error logs
tail -f webui/logs/api_errors.log

# View last 100 lines
tail -n 100 webui/logs/api_debug.log
```

## Debug Endpoints

### Log Information Endpoint
```
GET /api/debug/logs
```
Returns information about logging configuration, log files, and log levels.

### Health Check
```
GET /api/health
```
Basic health check with version information.

## Log Format

### Debug Log Format
```
2024-01-27 10:30:15,123 - webui.api.main - INFO - log_requests:45 - 游닌 GET /api/analyze/unmatched - Query: {'months': ['2024-01'], 'field': 'brush'}
```

### Console Output Format
```
2024-01-27 10:30:15,123 - INFO - 游꿢 Starting match phase for months: ['2024-01'], force: True
```

## Request/Response Logging

All API requests and responses are automatically logged with:
- HTTP method and path
- Query parameters
- Response status code
- Processing time

Example:
```
游닌 GET /api/brush-splits/load - Query: {'months': ['2024-01'], 'unmatched_only': 'true'}
游닋 GET /api/brush-splits/load - Status: 200 - Time: 1.234s
```

## Performance Monitoring

The API logs processing times for key operations:
- Match phase execution
- Brush split loading
- Analysis operations
- Data processing

## Debugging Tips

1. **Start with debug logs**: Use `api_debug.log` for detailed information
2. **Monitor errors**: Check `api_errors.log` for error-specific information
3. **Use the debug endpoint**: Call `/api/debug/logs` to verify logging configuration
4. **Tail logs in real-time**: Use the provided `tail_logs.py` script
5. **Check processing times**: Look for timing information in log messages

## Environment Variables

Set these environment variables for additional debugging:

```bash
export ENVIRONMENT=development
export DEBUG=true
```

## Log Levels

- **DEBUG**: Detailed information for debugging
- **INFO**: General information about operations
- **WARNING**: Warning messages for potential issues
- **ERROR**: Error messages with full stack traces

## Troubleshooting

### No logs appearing
1. Check that the `webui/logs/` directory exists
2. Verify file permissions
3. Check the debug endpoint: `GET /api/debug/logs`

### Logs too verbose
- Use console output only (INFO level)
- Filter by log level in your log viewer
- Use the error log file for critical issues only

### Performance issues
- Monitor processing times in logs
- Look for slow operations
- Check for repeated operations or loops # SOTD Pipeline API Debug Logging

This document explains how to use the enhanced debug logging features for the SOTD Pipeline API.

## Overview

The API now includes comprehensive logging that writes to both files and stdout, making it easier to debug issues and monitor API performance.

## Log Files

All logs are stored in the `webui/logs/` directory:

- **`api_debug.log`** - Detailed debug information (DEBUG level)
- **`api_errors.log`** - Error-level messages only
- Console output - INFO level messages for immediate feedback

## Starting the API with Debug Logging

### Option 1: Using the server manager (Recommended)
```bash
cd webui
./scripts/manage-servers.sh start
```

### Option 2: Direct uvicorn command
```bash
cd webui
ENVIRONMENT=test DEBUG=true PYTHONPATH=. python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
```

## Monitoring Logs

### Real-time log monitoring using server manager
```bash
cd webui
# View API debug logs
./scripts/manage-servers.sh logs api-debug

# View API error logs
./scripts/manage-servers.sh logs api-errors

# View backend server logs
./scripts/manage-servers.sh logs backend
```

### View specific log files directly
```bash
# View debug logs
tail -f webui/logs/api_debug.log

# View error logs
tail -f webui/logs/api_errors.log

# View last 100 lines
tail -n 100 webui/logs/api_debug.log
```

## Debug Endpoints

### Log Information Endpoint
```
GET /api/debug/logs
```
Returns information about logging configuration, log files, and log levels.

### Health Check
```
GET /api/health
```
Basic health check with version information.

## Log Format

### Debug Log Format
```
2024-01-27 10:30:15,123 - webui.api.main - INFO - log_requests:45 - 游닌 GET /api/analyze/unmatched - Query: {'months': ['2024-01'], 'field': 'brush'}
```

### Console Output Format
```
2024-01-27 10:30:15,123 - INFO - 游꿢 Starting match phase for months: ['2024-01'], force: True
```

## Request/Response Logging

All API requests and responses are automatically logged with:
- HTTP method and path
- Query parameters
- Response status code
- Processing time

Example:
```
游닌 GET /api/brush-splits/load - Query: {'months': ['2024-01'], 'unmatched_only': 'true'}
游닋 GET /api/brush-splits/load - Status: 200 - Time: 1.234s
```

## Performance Monitoring

The API logs processing times for key operations:
- Match phase execution
- Brush split loading
- Analysis operations
- Data processing

## Debugging Tips

1. **Start with debug logs**: Use `api_debug.log` for detailed information
2. **Monitor errors**: Check `api_errors.log` for error-specific information
3. **Use the debug endpoint**: Call `/api/debug/logs` to verify logging configuration
4. **Tail logs in real-time**: Use the provided `tail_logs.py` script
5. **Check processing times**: Look for timing information in log messages

## Environment Variables

Set these environment variables for additional debugging:

```bash
export ENVIRONMENT=development
export DEBUG=true
```

## Log Levels

- **DEBUG**: Detailed information for debugging
- **INFO**: General information about operations
- **WARNING**: Warning messages for potential issues
- **ERROR**: Error messages with full stack traces

## Troubleshooting

### No logs appearing
1. Check that the `webui/logs/` directory exists
2. Verify file permissions
3. Check the debug endpoint: `GET /api/debug/logs`

### Logs too verbose
- Use console output only (INFO level)
- Filter by log level in your log viewer
- Use the error log file for critical issues only

### Performance issues
- Monitor processing times in logs
- Look for slow operations
- Check for repeated operations or loops 