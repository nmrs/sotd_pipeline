---
description: 
globs: sotd/match/brush_matcher.py,sotd/match/brush_matching_strategies/**/*.py,tests/match/test_brush_matcher.py
alwaysApply: false
---
# Brush Matching Strategy Rules

## Brush Matching Flow

The brush matcher follows a specific priority order to ensure correct handling of different input types:

1. **Correct Matches Check** (Fastest) - Check entire input against `brush` section in correct_matches.yaml
2. **Brush Splits Check** (Human-curated) - Check `brush_splits.yaml` for human-curated splits
3. **Automated Splitting on High-Priority Delimiters** - Split on "w/", "with", "in" before known brush check
4. **Complete Brush Matching** - Apply brush strategies (includes Known Brush matching)
5. **Automated Splitting on Medium-Priority Delimiters** - Split on "-", "+" as fallback
6. **Dual Component Matching** - Try to match both handle and knot in same string
7. **Single Component Fallback** - Try handle-only or knot-only matching

### Key Principle
**Delimiter splitting takes precedence over known brush detection.** The presence of a delimiter like "w/" should trigger splitting before checking if the input matches a known brush pattern.

## Strategy Pattern Implementation
All brush matching strategies must inherit from `BaseBrushMatchingStrategy` and implement the `match()` method:

```python
from sotd.match.brush_matching_strategies.base_brush_matching_strategy import BaseBrushMatchingStrategy

class CustomBrushMatchingStrategy(BaseBrushMatchingStrategy):
    def match(self, value: str) -> Optional[dict]:
        """Return match result with consistent structure."""
        if self.pattern_matches(value):
            return {
                "matched": {
                    "brand": "Brand Name",
                    "model": "Model Name", 
                    "fiber": "Badger|Boar|Synthetic",
                    "knot_size_mm": 26.0,
                    "handle_maker": None,
                    "source_text": value,
                    "source_type": "exact|alias|brand|fiber|knot|artisan|unmatched"
                },
                "pattern": "regex_pattern_used",
                "match_type": "exact"
            }
        return None
```

## Complete Brush Handle Matching

The brush matching system supports complete brush handle matching for brands that require automatic handle/knot splitting:

### Configuration
- Set `handle_matching: true` in `brushes.yaml` for brands that need handle/knot splitting
- Hierarchical configuration: model-level overrides brand-level
- Default: `handle_matching: false` if not specified

### YAML Configuration Example
```yaml
brands:
  declaration_grooming:
    handle_matching: true  # Brand-level configuration
    models:
      cold_2_0:
        handle_matching: false  # Model-level override
```

### Complete Brush Handle Matching Workflow
1. **Configuration Check**: Look for `handle_matching: true` in brush catalog
2. **Handle Pattern Matching**: Use `HandleMatcher` to match handle patterns for the brand
3. **Result Enhancement**: Enhance existing brush match with handle information
4. **Fail Fast**: If handle matching fails, raises `ValueError` for debugging

**Note**: This feature is integrated into the existing brush matching workflow rather than being a separate process. It enhances complete brush matches that already have `brand` and `model` fields set.

### Implementation Details
- **Method**: Uses `_complete_brush_handle_matching()` method in `BrushMatcher`
- **Handle Patterns**: Searches across all sections in `handles.yaml` for the brand
- **Error Handling**: Uses fail-fast approach - raises `ValueError` if handle matching fails
- **Integration**: Called from two sites in the main `match()` method workflow
- **Preservation**: Maintains complete catalog specifications in match output

### Example Processing
```
Input: "Declaration B2 Washington"
Configuration: declaration_grooming.handle_matching = true

1. Configuration Check: handle_matching = true for Declaration Grooming
2. Handle Pattern Matching: "Washington" matches Declaration Grooming Washington handle
3. Result Enhancement: Enhanced brush match with handle information
4. Result: Unified brush with complete handle/knot specifications
```

## Intelligent Handle/Knot Splitting

### Delimiter Semantics and Priority
Different delimiters have different semantic meanings and priority levels:

```python
# High-priority delimiters (checked before known brush detection)
high_priority_delimiters = [" w/ ", " with ", " in "]

# Medium-priority delimiters (checked after known brush detection)
medium_priority_delimiters = [" / ", "/", " - ", " + "]

# Delimiter semantic meanings:
# " w/ ", " with " - Knot-ambiguous delimiters (require content analysis)
# " in " - Handle-primary delimiters (handle takes precedence)
# " / ", "/", " - ", " + " - Neutral delimiters (no semantic preference)
```

### Content Analysis Scoring
The `_score_as_handle()` method uses multiple signals:

**Strong Handle Indicators:**
- Explicit "handle" keyword (+10 points)
- Matches `handles.yaml` patterns (+6 to +12 based on section priority)
- Handle-specific terms: "stock", "custom", "artisan", "turned", "wood", "resin" (+2 each)

**Strong Knot Indicators:**
- Fiber types: "badger", "boar", "synthetic" (-8 points)
- Size patterns: "26mm", "28 mm" (-6 points)  
- Versioning: "V20", "B15" (-6 points)
- Multiple brush strategy matches (-4 to -8 points)

### Advanced Splitting Strategies
The system tries multiple splitting approaches in priority order:

1. **High-priority delimiter splitting** - Split on "w/", "with", "in" before known brush check
2. **Medium-priority delimiter splitting** - Split on "-", "+", "/" after known brush check
3. **Fiber-hint splitting** using fiber word positions
4. **Handle maker splitting** using known handle maker patterns
5. **Knot maker splitting** using proximity to fiber words

## Brand-Specific Intelligence

### Declaration Grooming Strategy
**Smart Default Behavior:**
- Standalone "B2", "B15" patterns default to Declaration Grooming
- Explicit brand rejection: "Zenith B2" → Zenith (not DG)  
- Context awareness: "DG B2" → Declaration Grooming

**Implementation Pattern:**
```python
def _has_non_dg_brand_context(self, text: str) -> bool:
    """Check for explicit non-DG brand indicators."""
    non_dg_patterns = [
        r"\bzenith\b", r"\bomega\b", r"\bsimpson\b", 
        r"\bchisel\s*\&\s*hound\b", r"\bc\&h\b"
    ]
    return any(re.search(pattern, text, re.IGNORECASE) for pattern in non_dg_patterns)
```

### Chisel & Hound Strategy
**Version Boundary Management:**
- Valid range: V10 through V27
- Strict boundary checking prevents false positives
- Multiple abbreviation support: "C&H", "Chisel & Hound", "chis hou"

### Zenith/Omega/Semogue Patterns
**Brand-Specific Defaults:**
- Zenith: Boar fiber default, B-series recognition
- Omega: Boar fiber default, numeric model patterns
- Semogue: Boar fiber default, traditional numbering

## Fiber Strategy Detection
Always track the source of fiber information:

```python
# Fiber strategy detection
user_fiber_patterns = {
    "Boar": r"boar", 
    "Badger": r"badger", 
    "Synthetic": r"synthetic|syn|nylon|plissoft|tuxedo|cashmere"
}

# Strategy assignment logic
if user_provided_fiber == catalog_fiber:
    result["fiber_strategy"] = "user_input"
elif user_provided_fiber != catalog_fiber:
    result["fiber_strategy"] = "yaml" 
    result["fiber_conflict"] = user_provided_fiber
else:
    result["fiber_strategy"] = "default" if using_default else "yaml"
```

## Return Structure Standards
All brush matches must return consistent structure:

```python
{
    "original": "input_string",
    "matched": {
        "brand": str | None,
        "model": str | None, 
        "fiber": str | None,
        "knot_size_mm": float | None,
        "handle_maker": str | None,
        "_matched_by_strategy": str,
        "_pattern_used": str,
        "_matched_from": str,  # "knot_part", "handle_part", "full_string"
        "_original_knot_text": str | None,  # When split occurred
        "_original_handle_text": str | None,  # When split occurred
        "fiber_strategy": "user_input|yaml|default",
        "fiber_conflict": str | None  # User input when conflicted
    } | None,
    "match_type": "exact|alias|brand|fiber|knot|artisan|unmatched" | None,
    "pattern": str | None
}
```

**Note**: Knot size processing and conflict resolution have been moved to the enrich phase for better catalog data preservation and user input handling.

## Strategy Execution Safety
For interactive development, fail fast on implementation errors:

```python
for strategy in self.strategies:
    # Let implementation errors bubble up - fail fast for debugging
    result = strategy.match(text)
    if result and (
        (isinstance(result, dict) and result.get("matched"))
        or (isinstance(result, dict) and result.get("brand"))
    ):
        return self._process_result(result, strategy)

# Only catch and handle specific known issues at startup
def _compile_patterns(self, patterns: list[str]) -> list[dict]:
    compiled = []
    for pattern in sorted(patterns, key=len, reverse=True):
        try:
            compiled.append({
                "pattern": pattern,
                "regex": re.compile(pattern, re.IGNORECASE)
            })
        except re.error as e:
            # Fail fast on invalid patterns during initialization
            raise ValueError(f"Invalid regex pattern '{pattern}': {e}")
    return compiled
```
