---
description: 
globs: *.py,**/*.py
alwaysApply: false
---
# Python-Specific Rules for SOTD Pipeline

## Import Organization
Always organize imports in this order:
1. Standard library imports
2. Third-party imports  
3. Local application imports

```python
import re
from pathlib import Path
from typing import Optional

import yaml
import praw

from sotd.match.base_matcher import BaseMatcher
```

## Type Hints Best Practices
- Use modern type hints (Python 3.9+): `list[dict]` instead of `List[Dict]`
- Use Optional for nullable values
- Use Path for file system operations
- Always include return type annotations

```python
def process_comments(comments: list[dict]) -> dict[str, list[str]]:
    """Process SOTD comments and extract product mentions."""
    pass

def find_product(text: str) -> Optional[str]:
    """Find product mention in text."""
    pass

def load_catalog(catalog_path: Path) -> dict[str, dict]:
    """Load product catalog from YAML file."""
    pass
```

## CLI Argument Patterns
Standard CLI argument patterns for phases:

```python
import argparse

def setup_cli_args():
    parser = argparse.ArgumentParser(description="SOTD Pipeline Phase")
    parser.add_argument('--month', required=True, 
                       help='Month to process (YYYY-MM format)')
    parser.add_argument('--verbose', action='store_true',
                       help='Enable verbose logging')
    parser.add_argument('--dry-run', action='store_true',
                       help='Show what would be done without executing')
    return parser
```

## Logging Setup
```python
import logging

def setup_logging(verbose: bool = False):
    """Setup logging for SOTD pipeline phase."""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)
```

## File I/O Rules
- Use UTF-8 encoding explicitly for all file operations
- Use yaml.safe_load() for YAML files
- Pretty-print JSON output for human readability
- Use atomic writes for data files to prevent corruption

```python
def save_json_data(data: dict, file_path: Path):
    """Save JSON data with proper formatting."""
    # Create temporary file for atomic write
    temp_path = file_path.with_suffix('.tmp')
    with temp_path.open('w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    # Atomic move
    temp_path.replace(file_path)

def load_yaml_config(config_path: Path) -> dict:
    """Load YAML configuration safely."""
    with config_path.open('r', encoding='utf-8') as f:
        return yaml.safe_load(f)
```
