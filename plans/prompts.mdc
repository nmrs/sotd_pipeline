# Development Workflows and Prompts

This file contains reusable development workflows and prompts for the SOTD Pipeline project. Use these with Cursor AI by referencing `@prompts.mdc` followed by the specific section name.

---

## üöÄ Development Workflows

### Task Driven TDD Loop
**Use when**: Implementing features with test-driven development approach.

```
Proceed through the remaining tasks in the current step one at a time. After completing each task:
1. Update the implementation plan to reflect the completed work.
2. Commit the changes with a clear message summarizing the task completed per .cursor/rules/git-and-cleanup.mdc
3. Move to the next task.
4. Run quality checks (for example "make format lint typecheck test" but use whatever is appropriate for the current work) only before commits, not after every task.
```

### Tracked Implementation Development Process
**Use when**: Working through a multi-session implementation plan systematically.

**Purpose**: These are instructions to proceed carefully through an implementation plan without causing major errors and ensuring that incremental progress is tracked. The plan is designed to be self-contained and will help you track progress across multiple development sessions without losing your place.

**Process**:
1. Start with first unchecked item
2. Follow the workflow: Complete each chunk before moving to the next
3. **Skip quality checks during development** (run only before commits)
4. Check off tasks: Mark each completed task in the implementation plan document with [x] and save the file
5. Update session notes: Add notes after each work session
6. Commit regularly: Commit changes with clear messages after each chunk. Commits should include updates to implementation plan.
7. **Run quality checks before commits**: Use "make format lint typecheck test" before committing, fixing any errors that result
8. Proceed *until context limit is reached*

---

## üìã Project Planning Prompts

### Idea Honing
**Use when**: You‚Äôre developing a thorough, step-by-step specification for a new product idea.
**Persona**: You are a Senior Product Manager at a software company, focused on clarity, completeness, and iterative refinement.
**Goal**: Produce a detailed, unambiguous specification that a developer can confidently implement without requiring further clarification.
```
Your task:
- Ask one clear, focused question at a time
- Build each question based on my previous answers
- Identify edge cases, assumptions, and missing context
- Ensure we cover business logic, user experience, technical constraints, and developer handoff requirements

IMPORTANT: Stay focused on the current question/topic until it is fully resolved.
- Do NOT move on to the next question or topic until the current one is completely addressed
- Do NOT introduce new questions or topics while the current one is still being discussed
- Do NOT summarize or skip ahead to other issues
- Complete the current discussion thoroughly before proceeding

Avoid summarizing or skipping ahead. We're working iteratively‚Äîstep by step‚Äîuntil the specification is complete and implementation-ready.

Here‚Äôs the idea:
[INSERT IDEA HERE]
```

### Focused Discussion Rule
**Use when**: Discussing a single question, recommendation, or specific topic that requires resolution.
**Goal**: Ensure complete resolution of the current topic before moving to any other questions or topics.
```
IMPORTANT: Stay focused on the current question/topic until it is fully resolved.

- Do NOT move on to the next question or topic until the current one is completely addressed
- Do NOT introduce new questions or topics while the current one is still being discussed
- Do NOT summarize or skip ahead to other issues
- Complete the current discussion thoroughly before proceeding

If you have additional questions or topics to discuss, wait until the current topic is fully resolved before introducing them.

Current topic: [INSERT CURRENT TOPIC HERE]
```

### TDD Project Planning
**Use when**: Starting a new feature or component using test-driven development.
**Persona**: You are a Principal Engineer at a software company. You care deeply about clean, well-organized, DRY code that‚Äôs easy to read, maintain, and evolve. You emphasize design clarity, incremental progress, and building systems that are easy to test and reason about.
**Goal**: Produce an executable project blueprint and a sequence of self-contained, test-first prompts‚Äîstructured for use by a code-generation LLM and ready to save as an .mdc plan under /plans.
```
Draft a clear, step-by-step blueprint for building this project using TDD.

Start with a high-level plan, then iteratively break it down into smaller, incremental units. Each unit should:
- Build logically on the previous one
- Include test scaffolding or test-first implementation
- Avoid orphaned or non-integrated code
- Be small enough to be implemented safely, but large enough to show meaningful progress

Once the plan is decomposed into building blocks:
- For each step, generate a separate code-generation prompt formatted as an MDC section
- Each prompt should be enclosed in fenced code blocks using the `text` tag
- Prompts should include just enough context from the previous steps to ensure continuity

Structure the final output as an `.mdc` document with:
- üìò A short project summary
- üß© A list of component steps
- üîÅ One `text`-tagged prompt block per step
- üß† Your own critical analysis of the prompt sequence and structure

After drafting, review the full plan:
- Look for redundant, ambiguous, or overly large steps
- Ensure each prompt produces coherent, testable, and connected output
- Refine the plan as needed

Repeat until the plan is lean, safe, and buildable via codegen prompts with no dangling pieces.
```

### Non-TDD Project Planning  
**Use when**: Tackling tasks that don‚Äôt require test-first development, such as lint cleanup, dependency updates, refactoring, or fixing failing tests.  
**Persona**: You are a Principal Engineer at a software company. You care deeply about clean, maintainable, DRY code that‚Äôs easy to read and evolve. You emphasize systematic progress, minimal regressions, and clear, actionable steps.  
**Goal**: Produce an executable project blueprint and a sequence of self-contained prompts‚Äîstructured for use by a code-generation LLM and ready to save as an `.mdc` plan under `/plans`.  

```
Draft a clear, step-by-step blueprint for completing this task without TDD.

Start with a high-level overview, then iteratively break it down into smaller, incremental steps. Each step should:
- Build logically on the previous one
- Clearly describe the code cleanup, fixes, or improvements
- Avoid large, monolithic changes that are risky or hard to verify
- Be small enough to implement safely, but large enough to show meaningful progress

Once the plan is decomposed into steps:
- For each step, generate a separate code-generation prompt formatted as an MDC section
- Each prompt should be enclosed in fenced code blocks using the `text` tag
- Include just enough context from the previous steps to ensure continuity

Structure the final output as an `.mdc` document with:
- üìò A short project summary
- üß© A list of component steps
- üîÅ One `text`-tagged prompt block per step
- üß† Your own critical analysis of the prompt sequence and structure

After drafting, review the plan:
- Check for redundant, ambiguous, or overly large steps
- Ensure each prompt produces coherent, incremental progress
- Refine the plan as needed

Repeat until the plan is lean, safe, and buildable via codegen prompts with no dangling pieces.
```

<!-- 
### Non-TDD Project Planning
**Use when**: Starting a new feature without strict TDD requirements.

```
Draft a detailed, step-by-step blueprint for building this project. Then, once you have a solid plan, break it down into small, iterative chunks that build on each other. Look at these chunks and then go another round to break it into small steps. Review the results and make sure that the steps are small enough to be implemented safely, but big enough to move the project forward. Iterate until you feel that the steps are right sized for this project.

From here you should have the foundation to provide a series of prompts for a code-generation LLM that will implement each step. Prioritize best practices, and incremental progress, ensuring no big jumps in complexity at any stage. Make sure that each prompt builds on the previous prompts, and ends with wiring things together. There should be no hanging or orphaned code that isn't integrated into a previous step.

Make sure and separate each prompt section. Use markdown. Each prompt should be tagged as text using code tags. The goal is to output prompts, but context, etc is important as well.
``` 
-->

---

## üìä Data Analysis Prompts

### SOTD Monthly Observations Prompt
**Use when**: Generating insights and observations from monthly SOTD hardware reports.

```
Act as a **snark-drenched yet insightful data analyst** who's been elbow-deep in shave logs and spreadsheet stubble. You've inhaled an entire timeline of Shave-of-the-Day reports and now clutch **the freshest month's tables**‚Äîcomplete with **Œî columns, Top Shavers, and maximum-blade-use brag sheets**.

## Mission

Unleash **10 + observations** that spotlight the latest month in the context of the full date range.

## Observation Fuel ‚Äî Pick What Sparks Joy

1. **Biggest movers** ‚Äì products or brands posting the largest ‚Üë or ‚Üì vs. last month.  
2. **Long-haul loyalty** ‚Äì absurd cumulative counts or unbroken streaks (e.g., one Feather blade for 30 straight shaves).  
3. **Underdog comebacks** ‚Äì gear that languished for months, then rocketed into the Top lists.  
4. **Brand defections** ‚Äì makers that vanished‚Äîor rookies elbowing legacy names aside.  
5. **Cross-category chemistry** ‚Äì razor √ó blade or brush √ó soap pairings that climbed together.  
6. **Persistent weirdness** ‚Äì statistical outliers that refuse to behave.  
7. **Top Shavers shout-outs** ‚Äì name-drop or gently roast the heroes atop the leaderboard.  
8. **Blade iron-men** ‚Äì highest single-blade use counts (edge-of-sanity milestones).  
9. **Leaderboard jockeying** ‚Äì who muscled into the Top 10, who fell out of the Top 3, or which #1 and #3 swapped places like they're drafting at Eau Rouge.

*Each observation should riff on at least one of these. Or maybe not. Maybe you're feeling crazy and want to highlight something totally unexpected.*

*Prioritize 

## Tone Guide

- **Half of the observations**: *"Jerry Seinfeld writing for BuzzFeed."*  
  - Keep it smart, punchy, and data-anchored.  
  - Shamelessly name-check the community where possible.  
  - Sprinkle metaphors involving boldness and questionable life choices‚Äî**but only where they sharpen the gag**.  
  - End each observation with a wink, sigh, or raised eyebrow.  
  - Humblebrag numbers sparingly, story-arc numbers generously.

- **Half of the observations**: *Play the straight-man.*  
  - Just the numbers here.  
  - "This happened. It was remarkable, so I'm remarking on it."

  > **Remember:** If forced to choose, pick the angle that delivers the most **noteworthy, surprising, or decision-driving finding**‚Äîthen season with humor.
```

---

## üõ†Ô∏è Utility Prompts

### TODO Checklist Generation
**Use when**: Need a comprehensive checklist for a task or feature.

```
Can you make a `todo.md` that I can use as a checklist? Be thorough.
```

### Error Resolution
**Use when**: Need to fix a specific error in the codebase.

```
You are the ChatGPT code editor. Review the error below. Read the file open in Work with Code and determine the best plan to resolve the issue. Generate a diff and apply it directly to the file open in Work with Code.

[error]
```

### Session Continuation
**Use when**: Continuing work in a new chat session.

```
Use the Tracked Implementation Development Process in @prompts.mdc to implement the @aggregate_implementation_plan.mdc using @aggregate_phase_spec.md and @sotd-pipeline-core.mdc for reference. Perform multiple tasks before asking for user feedback or permission to continue.
```

---

## üìù Usage Examples

### Starting a New Feature
```
Follow the TDD Project Planning prompt in @prompts.mdc to plan the new feature.
```

### Working Through Implementation
```
Follow the Tracked Implementation Development Process in @prompts.mdc to implement the current phase.
```

### Continuing in New Session
```
Use the Session Continuation prompt in @prompts.mdc to continue the current work.
```

### Fixing Errors
```
Use the Error Resolution prompt in @prompts.mdc to fix the current error.
```

### Generating Observations
```
Use the SOTD Monthly Observations Prompt in @prompts.mdc to analyze the latest monthly report.
```

---

## üîÑ Quick Reference

| Scenario | Use This Prompt |
|----------|----------------|
| New feature with TDD | TDD Project Planning |
| New feature without TDD | Non-TDD Project Planning |
| Multi-session implementation | Tracked Implementation Development Process |
| Error fixing | Error Resolution |
| Session continuation | Session Continuation |
| Monthly report analysis | SOTD Monthly Observations Prompt |
| Checklist generation | TODO Checklist Generation |
| Idea development | Idea Honing |
| Focused discussion | Focused Discussion Rule |

---

## üìÖ File Naming Rules

### **MANDATORY**: Date Naming for Plan Files
When creating ANY file with a date in the filename, **ALWAYS** run `date +%Y-%m-%d` to get the actual current date. Never use assumed, guessed, or copied dates.

**Examples:**
```bash
# ALWAYS do this first:
CURRENT_DATE=$(date +%Y-%m-%d)
echo $CURRENT_DATE  # Verify the date

# Then use it in filenames:
feature_implementation_plan_${CURRENT_DATE}.mdc
```

**Common Mistakes:**
- ‚ùå Using dates from examples: `plan_2025-01-28.mdc` (wrong!)
- ‚ùå Assuming the date: `plan_2025-07-08.mdc` (might be wrong!)
- ‚ùå Copying from other files: Using dates from existing files

**Correct Process:**
1. Run `date +%Y-%m-%d` to get actual current date
2. Use that exact date in the filename
3. Double-check the date is correct

**Why This Matters**: Avoids conflicts, maintains historical tracking, prevents confusion from incorrect dates


3. Double-check the date is correct

**Why This Matters**: Avoids conflicts, maintains historical tracking, prevents confusion from incorrect dates


<!-- '''
use ### Tracked Implementation Development Process to proceed with @plan_webui_lint_issues_fix_2025-07-25.mdc 

run all react tests and lint and build to validate that there are no remaining issues. Update plan status and add additional steps (or modify additional steps) if issues are found. Then use the process to continue the implementation if necessary
''' -->