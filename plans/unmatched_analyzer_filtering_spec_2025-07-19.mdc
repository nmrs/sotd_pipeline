# Unmatched Analyzer Filtering Implementation Plan

## Overview

Add checkbox functionality to the unmatched analyzer web UI to allow users to mark entries as "intentionally unmatched" and filter them out from future processing. This creates a clear audit trail of user decisions and improves data quality by distinguishing between "couldn't match" and "chose not to match" entries.

## Status: **TODO**

### Created: 2025-07-19
### Author: AI/automation
### Type: Feature Implementation

## Problem Statement

Currently, the unmatched analyzer shows all entries that couldn't be matched, but doesn't distinguish between:
- Entries that genuinely couldn't be matched (need regex patterns)
- Entries that were intentionally skipped (jokes, toys, spam, etc.)

This makes it difficult to:
- Focus on entries that actually need matching patterns
- Maintain a clear audit trail of filtering decisions
- Automatically skip known bad entries in future processing

## Solution

Add checkbox functionality to the unmatched analyzer web UI that:
1. Allows users to mark entries as "intentionally unmatched"
2. Stores these decisions in `data/intentionally_unmatched.yaml`
3. Integrates with the match phase to automatically skip these entries
4. Provides clear visual feedback and audit trail

## File Structure

```yaml
# data/intentionally_unmatched.yaml
razor:
  "Hot Wheels Play Razor":
    added_date: "2025-01-27"
    comment_ids:
      - file: "data/comments/2025-01.json"
        id: "abc123"
        source: "user"
      - file: "data/comments/2025-02.json"
        id: "def456"
        source: "pipeline"
blade:
  "leave":
    added_date: "2025-01-27"
    comment_ids:
      - file: "data/comments/2025-01.json"
        id: "ghi789"
        source: "user"
```

## UI Layout

```
[Show/Hide Filtered] [Search Box] [Sort by clicking column headers]

[✓] Select All (visible entries only)    [Update Filtered] (disabled unless state changed)

[✓] Entry 1
[✓] Entry 2
[ ] Entry 3                    
[ ] Entry 4                    
[ ] Entry 5                    
```

## API Endpoints

- `GET /api/unmatched` (existing)
- `POST /api/filtered` (add/remove entries)
- `GET /api/filtered` (get current filtered entries)

## Interaction Flow

1. **Checkbox behavior**: 
   - Checked = filtered (greyed out), unchecked = unfiltered (normal)
   - Select All only selects visible entries
   - Button disabled unless state changed

2. **Button text**: "Update Filtered" (dynamic based on selection)

3. **Confirmation messages**:
   - "Added X entries to filtered list"
   - "Removed Y entries from filtered list" 
   - "Added X, Removed Y entries from filtered list" (mixed)

4. **Real-time updates**: UI updates immediately, success message auto-hides

## Pipeline Integration

- Match phase checks `intentionally_unmatched.yaml` before matching
- Automatically adds new matches with source: "pipeline"
- Preserves original data but marks as "intentionally unmatched"

## Error Handling

- Fail fast with clear descriptive errors
- Merge comment_ids for duplicates
- Load all filtered entries on page load

## Implementation Phases

### Phase 1: Backend Infrastructure
- [ ] Create `data/intentionally_unmatched.yaml` file structure
- [ ] Implement YAML loading/saving utilities
- [ ] Add API endpoints for filtered entries
- [ ] Integrate with match phase filtering logic

### Phase 2: Frontend UI Components
- [ ] Add checkboxes to unmatched entries list
- [ ] Implement Select All functionality
- [ ] Add "Update Filtered" button
- [ ] Implement real-time UI updates

### Phase 3: User Experience
- [ ] Add Show/Hide Filtered toggle
- [ ] Implement search functionality
- [ ] Add sorting by column headers
- [ ] Implement success/error messaging

### Phase 4: Testing and Validation
- [ ] Test API endpoints
- [ ] Test UI interactions
- [ ] Test pipeline integration
- [ ] Validate data integrity

## Success Criteria

- [ ] Users can mark entries as intentionally unmatched via checkboxes
- [ ] Filtered entries are automatically skipped in match phase
- [ ] Clear audit trail of user decisions
- [ ] Real-time UI updates without page refresh
- [ ] Bulk operations work correctly
- [ ] Error handling is robust and user-friendly

## Notes

- This is a personal tool, so we prioritize simplicity over complex features
- No pagination needed initially - can add later if needed
- No backward compatibility concerns - can evolve the format as needed
- Git provides backup for corrupted files

## Lessons Learned

- Checkbox state clearly indicates filtered status (no need for separate column)
- Mixed selection operations are powerful for bulk management
- Real-time updates improve user experience significantly
- Clear terminology ("Filtered" vs "Unfiltered") reduces confusion
description:
globs:
alwaysApply: false
---
