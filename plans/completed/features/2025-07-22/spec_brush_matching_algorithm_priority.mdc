# Brush Matching Algorithm Priority Specification

## Overview

This specification defines the updated brush matching algorithm priority to better distinguish between complete brushes and handle/knot combinations. The current algorithm tries complete brush matching first, then falls back to handle/knot splitting. The new algorithm will check for delimiters first to determine the appropriate matching strategy.

## Problem Statement

The current brush matching algorithm has difficulty distinguishing between:
1. **Complete brushes** that happen to contain delimiters (e.g., "Chisel & Hound Sakura with v21 Fanchurian" - same maker)
2. **Handle/knot combinations** with different makers (e.g., "Wolf Whiskers RCE 1301 / Omega 10049 Boar" - different makers)

This leads to incorrect matches where the algorithm chooses a complete brush match when it should be matching a handle/knot combination, or vice versa.

## Requirements

### 1. Delimiter Detection and Priority

#### High Reliability Delimiters (Always Handle/Knot)
- `" w/ "` - Very common, always indicates handle/knot combination
- `" with "` - Common, usually indicates handle/knot combination  
- `" / "` - Common, usually indicates handle/knot combination

#### Medium Reliability Delimiters (Needs Smart Analysis)
- `" + "` - Could be handle/knot OR joint venture OR fiber mix
- `" - "` - Most common but ambiguous (needs smart analysis)
- `" in "` - Handle-primary delimiter

### 2. Algorithmic Priority

#### Current Algorithm (Implemented):
1. **Check correct matches first** (highest priority)
2. **Split input into handle and knot components** 
3. **Compare makers if both handle and knot are present**
4. **If same maker** → treat as complete brush
5. **If different makers** → use priority-based matching (knot vs handle priority)
6. **Fall back to main strategy matching** (complete brush matching)

#### Complete Brush Matching Timing:
Complete brush matching runs in **Step 6** as the final fallback, after:
- Correct matches (Step 1)
- Delimiter-based splitting and maker comparison (Steps 2-5)
- Priority-based matching for different makers (Step 5)

This ensures that:
- **Correct matches always take precedence** (manual overrides)
- **Delimiter-based logic is tried first** (user intent via delimiters)
- **Complete brush matching is the final fallback** (catalog-driven matching)

#### Decision: Step 1.2 Unnecessary
The original Step 1.2 (changing priority order) was determined to be **unnecessary/a bad idea** because:
1. **Current system already implements core logic** - splitting, maker comparison, same/different maker handling
2. **Current order is actually better** - correct matches should always be highest priority
3. **Bugs are in implementation, not priority order** - changing order wouldn't fix the bugs
4. **Changing priority would expose bugs more prominently** without fixing them

### 3. Complete Brush Detection

For complete brushes, the algorithm should:
1. **First**: Try to match as a complete brush in `brushes.yaml`
2. **If found**: Run handle maker logic to identify the handle maker
3. **And**: Run knot maker logic to identify the knot source
4. **Result**: Three-part structure (brush, handle, knot)

### 4. Handle/Knot Combination Detection

For handle/knot combinations, the algorithm should:
1. **Split** the input using delimiter detection
2. **Match** handle and knot components separately
3. **Determine** if components have same or different makers
4. **Result**: Handle/knot combination with maker information

## Examples

### Complete Brushes (No Delimiters)
- `"AP Shave Co G5C"` → Complete brush
- `"Zenith 506U N"` → Complete brush
- `"Semogue 1305"` → Complete brush

### Complete Brushes (With Delimiters, Same Maker)
- `"Chisel & Hound Sakura with v21 Fanchurian"` → Complete C&H brush (handle + knot from same maker)
- `"Chisel & Hound - Rob's Finest - 25mm Synthetic"` → Complete C&H brush

### Handle/Knot Combinations (Different Makers)
- `"Wolf Whiskers RCE 1301 / Omega 10049 Boar"` → WW handle + Omega knot
- `"Carnavis and Richardson - Industry w/26mm Frank Shaving Finest XD"` → C&R handle + Frank Shaving knot
- `"Rad Dinosaur Creations -Blue Skys- 26mm G5C Synthetic"` → RDC handle + AP Shave Co knot

### Edge Cases
- `"C&H+TnS 27mm H8"` → C&H handle + TnS knot (handle/knot combination)
- `"C&H + Mammoth DinoS'mores"` → Joint venture (complete brush)

## Data Structure Requirements

### Complete Brush Result
```json
{
  "brush": "AKA Brushworks G5C",
  "handle": {
    "maker": "AKA Brushworks",
    "model": "unknown"
  },
  "knot": {
    "maker": "AP Shave Co",
    "model": "G5C"
  }
}
```

### Handle/Knot Combination Result
```json
{
  "handle": {
    "maker": "Wolf Whiskers",
    "model": "RCE 1301"
  },
  "knot": {
    "maker": "Omega",
    "model": "10049"
  }
}
```

## Implementation Requirements

### 1. Catalog Updates
- Add complete brush makers to `brushes.yaml` (Declaration Grooming, Chisel & Hound, etc.)
- Ensure handle and knot maker logic can run for complete brushes

### 2. Algorithm Updates
- Modify brush matching priority order
- Update delimiter detection and reliability classification
- Enhance smart analysis for medium-reliability delimiters

### 3. Testing Requirements
- Test all delimiter types with various maker combinations
- Verify complete brush detection works with and without delimiters
- Ensure handle/knot combination detection works correctly
- Test edge cases and ambiguous scenarios

## Success Criteria

1. **Correct Classification**: Algorithm correctly identifies complete brushes vs handle/knot combinations
2. **Delimiter Handling**: All delimiter types are handled appropriately
3. **Maker Detection**: Same maker vs different maker detection works correctly
4. **Backward Compatibility**: Existing functionality is preserved
5. **Performance**: No significant performance degradation

## Dependencies

- Existing brush matching infrastructure
- Handle maker and knot maker logic
- Smart analysis scoring system
- Catalog data in `brushes.yaml`, `handles.yaml`, `knots.yaml`
description:
globs:
alwaysApply: false
---

## Lessons Learned and Implementation Decisions (Step 1.1) ✅ COMPLETE

**What Was Implemented:**
- ✅ **Delimiter Classification**: High-reliability ("w/", "with", "/"), handle-primary ("in"), medium-reliability ("+", "-")
- ✅ **Content Analysis**: All delimiter splitting uses `_score_as_handle()` to analyze both sides, not positional assignment
- ✅ **User Input Robustness**: Handles all spacing variants (e.g., `"A/B"`, `"A / B"`, `"A/ B"`, `"A /B"`)
- ✅ **Conflict Resolution**: Processes `" w/ "` before `/` to avoid misinterpreting `"w/"` as `/`
- ✅ **Fiber Integration**: Uses canonical patterns from `fiber_utils.py` for fiber detection
- ✅ **Comprehensive Testing**: All 1497 tests pass, covering all delimiter types and edge cases

**Key Implementation Decisions:**
1. **Delimiter Processing Order**: Always check `" w/ "` and `" with "` before `/` to avoid conflicts
2. **Content Analysis Required**: Positional assignment (first part = handle) is insufficient for real-world cases
3. **Regex Pattern**: Uses `r"(.+?)(?<!w)\s*/\s*(.+)"` to match `/` with optional spaces but not `"w/"`
4. **Fiber Detection**: Uses `match_fiber()` from `fiber_utils.py` for canonical patterns

**Lessons Learned:**
- **User Input Variations**: Users will input delimiters with or without spaces, requiring robust handling
- **Delimiter Conflicts**: `"w/"` and `/` can conflict, requiring careful processing order
- **Content Analysis Essential**: Both sides must be analyzed using catalog patterns and heuristics
- **Test Coverage Critical**: Comprehensive tests are essential for delimiter edge cases

**No YAML Changes Needed**: All delimiter logic uses existing YAML patterns and fiber detection.

**Next: Step 1.2** - Update BrushMatcher.match() for delimiter-first priority and maker comparison.

## Clarification: Brand/Model for Handle/Knot Combos

- For any handle/knot combo (e.g., 'B15 w/ custom handle'), the top-level brand/model MUST be None, even if the knot is a known/canonical knot (e.g., Declaration Grooming B15).
- Only true complete brushes (catalog-driven, or same-maker splits) should preserve brand/model.

### Example: Handle/Knot Combo

Input: 'B15 w/ custom handle'

Result:
{
  "original": "B15 w/ custom handle",
  "matched": {
    "brand": null,
    "model": null,
    "handle_maker": "custom",  # or None if unknown
    "knot_maker": "Declaration Grooming",
    "knot": {
      "brand": "Declaration Grooming",
      "model": "B15"
    }
  },
  ...
}

- This rule prevents confusion in reporting and aggregation, and is now enforced by the test suite.

## Analysis: Delimiter Priority Distinction (Step 1.1 Review)

**Key Finding**: The distinction between high and medium reliability delimiters may be over-engineered, BUT `" in "` is fundamentally different and should be treated specially.

**Current Differences:**
- **High Reliability** (`" w/ "`, `" with "`, `/`): Uses `_split_by_delimiter_simple()` - single split point, content analysis
- **Medium Reliability** (`" + "`, `" - "`): Uses `_split_by_delimiter_smart()` - multiple split points, thorough but expensive
- **Handle Primary** (`" in "`): Uses `_split_by_delimiter_simple()` - but should use semantic meaning

**Assessment:**
1. **Same Scoring Logic**: High and medium reliability both use identical `_score_as_handle()` method
2. **Arbitrary Classification**: Why is `" w/ "` high reliability but `" + "` medium?
3. **Limited Downstream Impact**: Delimiter type is only used for logging/tracking
4. **Over-Engineering**: The high/medium distinction adds complexity without clear benefits
5. **Special Case**: `" in "` has semantic meaning ("knot in handle") and should override content analysis

**Semantic Meaning of `" in "`:**
- **Semantic**: "knot in handle" - the first part is the knot, second part is the handle
- **Current Implementation**: Does content analysis and scores both parts
- **Problem**: Content analysis can override semantic meaning
- **Example**: "Declaration Grooming in Stirling handle" should be:
  - Knot: "Declaration Grooming" (the thing that's "in" the handle)
  - Handle: "Stirling handle" (the thing that contains the knot)
- **Current Result**: Reversed due to content analysis

**Recommendation**: 
1. **Simplify high/medium distinction**: Use single approach for `" w/ "`, `" with "`, `/`, `" + "`, `" - "`
2. **Preserve semantic meaning**: `" in "` should use positional assignment, not content analysis
3. **Fix `" in "` implementation**: Use `_split_by_delimiter()` with `handle_first=False` (knot first, handle second)

**Impact**: This would simplify the codebase while preserving the semantic meaning of `" in "` and maintaining functionality for other delimiters.

