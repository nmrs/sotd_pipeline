---
description: 
globs: 
alwaysApply: false
---
# Aggregate Phase Implementation Plan

## Overview

This document outlines the implementation plan for rebuilding the Aggregate phase from scratch. The phase will process enriched SOTD data to generate statistical summaries for downstream reporting.

## File Organization

### Core Structure
```
sotd/aggregate/
├── __init__.py
├── cli.py              # CLI interface and argument parsing
├── run.py              # Main execution logic
├── load.py             # Data loading from enriched phase
├── engine.py           # Core aggregation engine
├── processor.py        # Data processing and validation
├── save.py             # Output saving and formatting
└── utils/
    ├── __init__.py
    ├── metrics.py      # Metric calculation functions
    └── validation.py   # Data validation functions
```

### Aggregator Categories
```
sotd/aggregate/aggregators/
├── __init__.py
├── core/               # Core product aggregations
│   ├── __init__.py
│   ├── razor_aggregator.py
│   ├── blade_aggregator.py
│   ├── brush_aggregator.py
│   └── soap_aggregator.py
├── manufacturers/      # Manufacturer-level aggregations
│   ├── __init__.py
│   ├── razor_manufacturer_aggregator.py
│   ├── blade_manufacturer_aggregator.py
│   └── soap_maker_aggregator.py
├── formats/           # Format-level aggregations
│   ├── __init__.py
│   └── razor_format_aggregator.py
├── brush_specialized/ # Brush component aggregations
│   ├── __init__.py
│   ├── handle_maker_aggregator.py
│   ├── knot_maker_aggregator.py
│   ├── fiber_aggregator.py
│   └── knot_size_aggregator.py
├── razor_specialized/ # Specialized razor aggregations
│   ├── __init__.py
│   ├── blackbird_plate_aggregator.py
│   ├── christopher_bradley_plate_aggregator.py
│   ├── game_changer_plate_aggregator.py
│   ├── super_speed_tip_aggregator.py
│   ├── straight_width_aggregator.py
│   ├── straight_grind_aggregator.py
│   └── straight_point_aggregator.py
├── users/             # User aggregations
│   ├── __init__.py
│   └── user_aggregator.py
└── cross_product/     # Cross-product aggregations
    ├── __init__.py
    ├── razor_blade_combo_aggregator.py
    └── highest_use_count_per_blade_aggregator.py
```

## Implementation Steps

### Phase 1: Core Infrastructure
- [x] **1.1 Basic Structure**
  - [x] Create directory structure
  - [x] Create `__init__.py` files
  - [x] Set up basic imports and exports

- [x] **1.2 CLI Interface (`cli.py`)**
  - [x] Implement argument parsing (month, year, range)
  - [x] Add validation for date formats
  - [x] Include debug and force options
  - [x] Follow existing CLI patterns from other phases

- [x] **1.3 Data Loading (`load.py`)**
  - [x] Implement enriched data loading from JSON files
  - [x] Add data validation for required fields
  - [x] Handle missing files gracefully
  - [x] Support for date range processing

- [x] **1.4 Core Engine (`engine.py`)**
  - [x] Implement main aggregation orchestration
  - [x] Add progress tracking with tqdm
  - [x] Implement sequential month processing
  - [x] Add error handling and logging

- [x] **1.5 Data Processing (`processor.py`)**
  - [x] Implement data validation and cleaning
  - [x] Add field normalization functions
  - [x] Handle null/missing values
  - [x] Implement data quality checks

- [x] **1.6 Output Saving (`save.py`)**
  - [x] Implement JSON output formatting
  - [x] Add metadata generation (total_shaves, unique_shavers, etc.)
  - [x] Ensure proper file structure and naming
  - [x] Add position field calculation and insertion

- [x] **1.7 Utilities (`utils/`)**
  - [x] **metrics.py**: Metric calculation functions (shaves, unique_users, etc.)
  - [x] **validation.py**: Data validation and quality check functions

**✅ Phase 1: Core Infrastructure - COMPLETE**

### Phase 2: Core Product Aggregators
- [x] **2.1 Razor Aggregator (`aggregators/core/razor_aggregator.py`)**
  - [x] Implement razor aggregation logic
  - [x] Handle brand/model/format combination
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **2.2 Blade Aggregator (`aggregators/core/blade_aggregator.py`)**
  - [x] Implement blade aggregation logic
  - [x] Handle brand/model/format combination
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **2.3 Brush Aggregator (`aggregators/core/brush_aggregator.py`)**
  - [x] Implement brush aggregation logic
  - [x] Handle brand/model/fiber combination
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **2.4 Soap Aggregator (`aggregators/core/soap_aggregator.py`)**
  - [x] Implement soap aggregation logic
  - [x] Handle maker/scent combination
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

### Phase 3: Manufacturer Aggregators
- [x] **3.1 Razor Manufacturer Aggregator (`aggregators/manufacturers/razor_manufacturer_aggregator.py`)**
  - [x] Implement razor manufacturer aggregation
  - [x] Extract brand from razor.matched.brand
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **3.2 Blade Manufacturer Aggregator (`aggregators/manufacturers/blade_manufacturer_aggregator.py`)**
  - [x] Implement blade manufacturer aggregation
  - [x] Extract brand from blade.matched.brand
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **3.3 Soap Maker Aggregator (`aggregators/manufacturers/soap_maker_aggregator.py`)**
  - [x] Implement soap maker aggregation
  - [x] Extract maker from soap.matched.maker
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

### Phase 4: Format Aggregators
- [x] **4.1 Razor Format Aggregator (`aggregators/formats/razor_format_aggregator.py`)**
  - [x] Implement razor format aggregation with sophisticated format detection
  - [x] **ENHANCED**: Mirror old RazorFormatExtractor logic for format combination
  - [x] **ENHANCED**: Handle shavette + blade format combinations (e.g., "Shavette (AC)")
  - [x] **ENHANCED**: Special Half DE processing (DE blade in shavette → "Shavette (Half DE)")
  - [x] **ENHANCED**: Preserve full "Half DE" variants (e.g., "Half DE (multi-blade)")
  - [x] **ENHANCED**: Fallback logic: razor format → blade format → default to DE
  - [x] **ENHANCED**: Handle predefined shavette formats (e.g., "Shavette (AC)" from catalog)
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc
  - [x] **COMPREHENSIVE TESTING**: Added 10 test cases covering all format detection scenarios

**✅ Phase 4: Format Aggregators - COMPLETE WITH ENHANCED LOGIC**

### Phase 5: Brush Specialized Aggregators
- [x] **5.1 Handle Maker Aggregator (`aggregators/brush_specialized/handle_maker_aggregator.py`)**
  - [x] Implement handle maker aggregation
  - [x] Extract handle_maker from brush.matched.handle_maker
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **5.2 Knot Maker Aggregator (`aggregators/brush_specialized/knot_maker_aggregator.py`)**
  - [x] Implement knot maker aggregation
  - [x] Extract knot_maker from brush.matched.knot_maker
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **5.3 Fiber Aggregator (`aggregators/brush_specialized/fiber_aggregator.py`)**
  - [x] Implement fiber aggregation
  - [x] Extract fiber from brush.matched.fiber (fallback to brush.enriched.fiber)
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **5.4 Knot Size Aggregator (`aggregators/brush_specialized/knot_size_aggregator.py`)**
  - [x] Implement knot size aggregation
  - [x] Extract knot_size_mm from brush.matched.knot_size_mm (fallback to brush.enriched.knot_size_mm)
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

**✅ Phase 5: Brush Specialized Aggregators - COMPLETE**

### Phase 6: Razor Specialized Aggregators
- [x] **6.1 Blackbird Plate Aggregator (`aggregators/razor_specialized/blackbird_plate_aggregator.py`)**
  - [x] Implement Blackbird plate aggregation
  - [x] Extract plate from razor.enriched.plate
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **6.2 Christopher Bradley Plate Aggregator (`aggregators/razor_specialized/christopher_bradley_plate_aggregator.py`)**
  - [x] Implement Christopher Bradley plate aggregation
  - [x] Extract plate_type and plate_level from razor.enriched
  - [x] Combine into composite key
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **6.3 Game Changer Plate Aggregator (`aggregators/razor_specialized/game_changer_plate_aggregator.py`)**
  - [x] Implement Game Changer plate aggregation
  - [x] Extract gap from razor.enriched.gap
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **6.4 Super Speed Tip Aggregator (`aggregators/razor_specialized/super_speed_tip_aggregator.py`)**
  - [x] Implement Super Speed tip aggregation
  - [x] Extract super_speed_tip from razor.enriched.super_speed_tip
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **6.5 Straight Razor Spec Aggregators**
  - [x] **Width Aggregator**: Extract width from razor.enriched.width
  - [x] **Grind Aggregator**: Extract grind from razor.enriched.grind
  - [x] **Point Aggregator**: Extract point from razor.enriched.point
  - [x] Each with position field and proper sorting

**✅ Phase 6: Razor Specialized Aggregators - COMPLETE**

### Phase 7: User Aggregators
- [x] **7.1 User Aggregator (`aggregators/users/user_aggregator.py`)**
  - [x] Implement user aggregation
  - [x] Extract author from comment data
  - [x] Calculate shaves and missed_days
  - [x] Add position field calculation
  - [x] Sort by shaves desc, missed_days desc

**✅ Phase 7: User Aggregators - COMPLETE**

### Phase 8: Cross-Product Aggregators
- [x] **8.1 Razor Blade Combo Aggregator (`aggregators/cross_product/razor_blade_combo_aggregator.py`)**
  - [x] Implement razor blade combination aggregation
  - [x] Combine razor and blade data
  - [x] Create composite keys
  - [x] Add position field calculation
  - [x] Sort by shaves desc, unique_users desc

- [x] **8.2 Highest Use Count per Blade Aggregator (`aggregators/cross_product/highest_use_count_per_blade_aggregator.py`)**
  - [x] Implement highest use count per blade aggregation
  - [x] Track per-user blade usage
  - [x] Extract use_count from blade.enriched.use_count
  - [x] Add position field calculation
  - [x] Sort by uses desc

**✅ Phase 8: Cross-Product Aggregators - COMPLETE**

### Phase 9: Integration and Testing
- [x] **9.1 Main Runner Integration (`run.py`)**
  - [x] Integrate all aggregators into main engine
  - [x] Implement proper orchestration
  - [x] Add error handling and logging
  - [x] Ensure all categories are processed

- [x] **9.2 Unit Tests**
  - [x] Test each aggregator individually
  - [x] Test metric calculation functions
  - [x] Test position field generation
  - [x] Test sorting logic
  - [x] Test data validation
  - [x] **ENHANCED**: Comprehensive razor format tests with 10 scenarios

- [x] **9.3 Integration Tests**
  - [x] Test end-to-end processing
  - [x] Test CLI interface
  - [x] Test file I/O with sample data
  - [x] Test error handling scenarios

- [x] **9.4 Data Quality Tests**
  - [x] Test with edge cases (empty data, single records)
  - [x] Test error conditions
  - [x] Validate output structure
  - [x] Verify position field correctness

### Phase 10: Documentation and Cleanup
- [x] **10.1 Documentation**
  - [x] Update docstrings for all functions
  - [x] Add type hints throughout
  - [x] Document aggregator interfaces
  - [x] Update README if needed

- [x] **10.2 Code Quality**
  - [x] Run Black formatting
  - [x] Run Ruff linting
  - [x] Run Pyright type checking
  - [x] Ensure all tests pass

- [ ] **10.3 Performance Optimization**
  - [ ] Profile memory usage
  - [ ] Optimize pandas operations
  - [ ] Add progress tracking
  - [ ] Consider parallel processing if needed

## Key Requirements

### Position Field
- Every aggregation output must include a "position" field
- Position is 1-based rank within the sorted list
- Enables robust delta calculations in report phase

### Sort Orders
- **Default**: shaves desc, unique_users desc
- **Users**: shaves desc, missed_days desc  
- **Highest Use Count per Blade**: uses desc

### Data Structure
- Follow exact field names specified in aggregate phase spec
- Include all required fields for each category
- Ensure consistent output structure
- **Field Name Corrections**: Updated to match actual report output:
  - Users: Use "user" field (not "name")
  - Highest Use Count per Blade: Use "user", "blade", "format", "uses" fields

### Error Handling
- Fail fast for internal errors
- Handle external failures gracefully
- Validate data early and clearly

## Dependencies

### New Dependencies
- `pandas`: For efficient data aggregation and manipulation

### Existing Dependencies
- `tqdm`: Progress bars
- `pathlib`: File path handling
- `json`: JSON I/O operations
- `argparse`: CLI argument parsing

## Testing Strategy

### Unit Tests
- Test each aggregator in isolation
- Test metric calculation functions
- Test data validation functions
- Test sorting and position field logic

### Integration Tests
- Test complete aggregation pipeline
- Test CLI interface with various arguments
- Test file I/O with sample data
- Test error handling scenarios

### Test Data
- Sample enriched data files
- Edge cases (empty data, single records)
- Error conditions (missing fields, malformed data)

## Success Criteria

- [x] All aggregations produce correct output structure
- [x] Position fields are correctly calculated and sequential
- [x] Sort orders match specification exactly
- [x] All tests pass (unit, integration, data quality)
- [x] Code quality checks pass (Black, Ruff, Pyright)
- [x] Performance is acceptable for typical datasets
- [x] Error handling is robust and informative
- [x] Documentation is complete and accurate

## Recent Enhancements (Latest Session)

### Razor Format Aggregator Sophisticated Logic
- **Implemented**: `_determine_razor_format()` function that mirrors old RazorFormatExtractor logic
- **Shavette Format Detection**: Combines razor type + blade format (e.g., "Shavette (AC)", "Shavette (Half DE)")
- **Half DE Special Processing**: 
  - DE blade in shavette → "Shavette (Half DE)" (not "Shavette (DE)")
  - Preserves full "Half DE" variants (e.g., "Half DE (multi-blade)")
  - Always returns full razor format if it starts with "Half DE"
- **Fallback Logic**: razor format → blade format → default to DE
- **Predefined Format Handling**: Respects catalog entries like "Shavette (AC)"
- **Comprehensive Testing**: 10 test scenarios covering all edge cases

### Key Implementation Details
- **Format Combination**: `f"{SHAVETTE} ({blade_format})"` for shavettes
- **Half DE Detection**: `razor_format.startswith(HALF_DE)` check
- **Blade Format Fallback**: When no razor format, use blade format
- **Default Behavior**: Return "DE" when no formats available
- **Edge Case Handling**: Skip records with no razor match (`razor_matched is None`)

### Test Coverage
- Basic format aggregation
- Shavette + AC blade combination
- Shavette + DE blade (becomes Half DE)
- Shavette with unspecified blade format
- Predefined shavette formats
- Half DE detection and preservation
- Blade format fallback
- Default DE behavior
- No razor match handling
- Complex multi-format scenarios

**Status**: All razor format aggregation tests passing ✅

- [ ] **User Aggregation: Missed Days Logic**
  - [x] For each user, collect all dates they posted shaves (from thread titles)
  - [x] Compare against all possible dates in the month
  - [x] Calculate which days they missed
  - [x] Store both the count (`missed_days`) and the list (`missed_dates`) of missed days (YYYY-MM-DD)
  - [x] Sort users by shaves (descending), then missed_days (ascending)
  - [x] Output structure: {"position": N, "user": "Username", "shaves": N, "missed_days": N, "missed_dates": [YYYY-MM-DD, ...]}