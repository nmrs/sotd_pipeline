# External Scoring Refactor Plan

## Overview
Refactor the brush matching scoring system to make all scoring external (handled by the scoring engine) rather than using the hybrid approach with ComponentScoreCalculator. This will create consistency across all strategy types.

## Current Problem
The scoring system has inconsistent approaches:
- **Complete brush strategies**: Scoring engine only (base score + no modifiers)
- **Composite brush strategies**: Hybrid (ComponentScoreCalculator + scoring engine modifiers)
- **Component strategies**: Scoring engine only (base score + modifiers)

This creates confusion where some scoring happens "inside" components and some happens "outside" in modifiers.

## Goal
Make all strategies follow the same pattern:
1. Strategies return basic matched data (no internal scoring)
2. Scoring engine handles ALL scoring logic consistently
3. Remove ComponentScoreCalculator entirely

## TDD Approach

### Phase 1: Write Tests First
1. **Test current behavior** - Capture existing scoring behavior as tests
2. **Test new external scoring** - Write tests for the new external-only approach
3. **Test strategy consistency** - Ensure all strategy types follow same pattern

### Phase 2: Implementation
1. **Remove ComponentScoreCalculator usage** from all strategies
2. **Update scoring engine** to handle all component scoring via modifiers
3. **Update configuration** to reflect new scoring approach
4. **Validate consistency** across all strategy types

## Test Strategy

### Test Files to Create/Update
- `tests/match/brush/scoring/test_external_scoring_consistency.py` - New
- `tests/match/brush/scoring/test_component_score_calculator_removal.py` - New
- `tests/match/brush/strategies/test_strategy_scoring_consistency.py` - New

### Test Categories
1. **Current Behavior Tests** - Capture existing scoring before changes
2. **External Scoring Tests** - Test new external-only approach
3. **Strategy Consistency Tests** - Ensure all strategies follow same pattern
4. **Integration Tests** - Test end-to-end scoring behavior

## Implementation Steps

### Step 1: Test Current Behavior
- Write tests that capture current scoring behavior for all strategy types
- Document the current hybrid approach in tests
- Ensure tests pass with current implementation

### Step 2: Design New External Scoring
- Design new modifier structure for component scoring
- Plan how to move ComponentScoreCalculator logic to scoring engine
- Update configuration structure

### Step 3: Implement External Scoring
- Remove ComponentScoreCalculator usage from strategies
- Add new modifiers to scoring engine for component scoring
- Update configuration to use new approach

### Step 4: Validate and Clean Up
- Run all tests to ensure behavior is preserved
- Remove ComponentScoreCalculator entirely
- Update documentation

## Expected Benefits
1. **Consistency** - All strategies follow same scoring pattern
2. **Clarity** - All scoring logic in one place (scoring engine)
3. **Maintainability** - Easier to understand and modify scoring
4. **Testability** - Easier to test scoring logic in isolation

## Risk Mitigation
- **Comprehensive tests** - Ensure behavior is preserved
- **Incremental changes** - Make changes step by step
- **Validation** - Test each change thoroughly

## Success Criteria
- [x] All strategies use external scoring only
- [x] ComponentScoreCalculator is removed
- [x] All existing tests pass
- [x] New tests validate external scoring approach
- [x] Scoring behavior is preserved across all strategy types
- [x] Configuration is updated to reflect new approach

## Timeline
- **Phase 1 (Tests)**: 2-3 hours
- **Phase 2 (Implementation)**: 3-4 hours
- **Total**: 5-7 hours

## Dependencies
- None - this is a self-contained refactoring

## Notes
- This refactoring improves code quality and maintainability
- No functional changes to scoring behavior
- Focus on consistency and clarity

## Implementation Summary

### Completed Tasks
1. **Created comprehensive test suite** for external scoring consistency
2. **Updated scoring engine** to calculate component scores externally via modifiers
3. **Removed ComponentScoreCalculator usage** from all strategies
4. **Updated configuration** to include base scores for component strategies
5. **Updated existing tests** to reflect new external scoring behavior
6. **Validated all tests pass** (204/204 tests passing)

### Key Changes Made
- **Scoring Engine**: Modified `_modifier_handle_weight` and `_modifier_knot_weight` to calculate scores externally
- **Strategies**: Removed all `ComponentScoreCalculator.calculate_component_scores()` calls
- **Configuration**: Added base scores for `handle_matching` (30.0) and `knot_matching` (30.0)
- **Tests**: Updated tests to expect external scoring behavior

### Benefits Achieved
- **Consistency**: All strategies now follow the same external scoring pattern
- **Clarity**: All scoring logic is centralized in the scoring engine
- **Maintainability**: Easier to understand and modify scoring behavior
- **Testability**: Better separation of concerns for testing

### Files Modified
- `sotd/match/brush/scoring/engine.py` - Updated modifier functions
- `sotd/match/brush/strategies/automated/automated_split_strategy.py` - Removed ComponentScoreCalculator usage
- `sotd/match/brush/strategies/full_input_component_matching_strategy.py` - Removed ComponentScoreCalculator usage
- `sotd/match/brush/strategies/known/known_split_wrapper_strategy.py` - Removed ComponentScoreCalculator usage
- `data/brush_scoring_config.yaml` - Added component strategy base scores
- `tests/match/brush/scoring/test_external_scoring_consistency.py` - New test file
- `tests/match/brush/scoring/test_component_score_calculator_removal.py` - New test file
- `tests/match/brush/scoring/test_scoring_engine_handle_knot_scores.py` - Updated tests

## Status: COMPLETE âœ…