---
description: 
globs: 
alwaysApply: false
---
# Monthly and Annual Reports TDD Implementation Plan

## Memory and Resume Prompt for Continuation

### Project Context and Current State
You are working on the SOTD Pipeline project - a Python 3.11 data processing pipeline that extracts, processes, and analyzes "Shave of the Day" posts from Reddit's r/wetshaving community. The pipeline consists of 6 sequential phases: fetch, extract, match, enrich, aggregate, and report.

**Current Status**: Phase 4 (Range Support) is COMPLETE. All 1210 tests are passing, quality checks (format, lint, typecheck, test) are clean, and the codebase is in a stable state.

### Key Implementation Details
- **Phase 1**: Annual Aggregator Core (COMPLETE) - CLI interface, data loader, aggregation engine, data saver, integration
- **Phase 2**: Annual Report Generation (COMPLETE) - CLI interface, template system, data loader, report generator, integration  
- **Phase 3**: Annual Delta Calculator (COMPLETE) - Delta calculator, comparison loader, integration with table generation
- **Phase 4**: Range Support (COMPLETE) - Multi-year processing with comprehensive CLI and error handling

### Critical Architecture Patterns
1. **TDD Approach**: Write tests first, implement incrementally, refactor while keeping tests green
2. **Error Handling**: Robust handling of missing/corrupt data with debug output
3. **Data Flow**: Monthly aggregated data → Annual aggregator → Annual aggregated data → Annual report generator → Annual reports with deltas
4. **File Structure**: `data/aggregated/annual/YYYY.json` for annual data, `data/reports/YYYY-type.md` for reports
5. **CLI Patterns**: Extend existing CLI with `--annual`, `--year`, `--range` flags while maintaining backward compatibility
6. **Delta Integration**: Multi-year delta columns always present in tables, missing data filled with "n/a"
7. **Range Processing**: Support for `--annual --range YYYY:YYYY` format with comprehensive validation

### Quality Standards (MANDATORY)
- **Pre-commit validation**: `make format lint typecheck test` must pass before any commit
- **Test coverage**: Comprehensive unit and integration tests for all functionality
- **Documentation**: Update plan document and cursor rules with lessons learned
- **Git organization**: Logical commits by type (fix/feat/test/docs) and dependency order

### Current File Structure
```
sotd/
  aggregate/
    annual_engine.py      # Annual aggregation engine with range support
    annual_loader.py      # Annual data loader
    annual_run.py         # Annual aggregation integration
    cli.py               # CLI with annual/range support
  report/
    annual_delta_calculator.py    # Year-over-year delta calculations
    annual_comparison_loader.py   # Load comparison year data
    annual_generator.py           # Report generation with delta integration
    annual_load.py               # Annual report data loader
    annual_run.py                # Annual report integration with range support
    cli.py                      # CLI with annual/range support
    report_core.py              # Core monthly report logic (refactored)
    table_generators/base.py     # Updated for multi-year delta columns
data/
  report_templates.yaml  # Annual templates added
  reports/              # Sample annual reports
tests/
  aggregate/test_annual_*.py  # Annual aggregation tests
  report/test_annual_*.py     # Annual report tests
  report/test_annual_range_*.py # Annual range integration tests
  report/test_annual_delta_*.py # Annual delta tests
```

### Key Lessons Learned from Phase 4
- **Circular Import Resolution**: Refactor code to avoid circular imports by moving shared logic to separate modules
- **Error Propagation**: Re-raise specific exceptions (OSError) directly while wrapping others in RuntimeError for clarity
- **CLI Validation**: Annual range format must be `YYYY:YYYY` (not `YYYY-MM:YYYY-MM`) for consistency
- **Test Alignment**: Update test expectations to match actual implementation behavior (SystemExit vs ValueError)
- **Code Organization**: Prefer smaller, focused files with clear responsibilities over large monolithic files

### Development Environment
- **Python**: 3.11 (enforced by pyrightconfig.json)
- **Virtual Environment**: `.venv` directory
- **Quality Tools**: Black (formatting), Ruff (linting), Pyright (type checking), pytest (testing)
- **Git**: Organized commits following git-and-cleanup rules

**Timestamp**: 2024-12-19T10:14:00 - Phase 4 Complete, all phases finished

**Resume Command**: All phases complete - ready for final validation and documentation

## Project Overview
Extend the existing report phase to support annual reports in addition to monthly reports, providing comprehensive yearly summaries that follow the same patterns and quality as monthly reports.

## Current Status and Next Steps

### Project Status (2024-12-19)
**Current Phase**: Phase 4 - Range Support ✅ COMPLETE
**Overall Progress**: 100% complete (All phases complete)
**Test Status**: All 1210 tests passing, quality checks clean

### Completed Phases Summary

#### Phase 1: Foundation - Annual Aggregator Core ✅ COMPLETE
**Status**: All 5 chunks implemented and tested. 70 tests passing.
**Key Files**: `sotd/aggregate/annual_*.py`, `tests/aggregate/test_annual_*.py`
**Key Achievements**:
- CLI interface with `--annual`, `--year`, `--range` flags
- Annual data loader with missing month handling
- Annual aggregation engine with metadata generation
- Annual data saver with comprehensive validation
- Full integration with end-to-end workflow
**Lessons Learned**: TDD approach effective, consistent metadata structure critical, error handling patterns established.

#### Phase 2: Report Generation - Annual Reports Core ✅ COMPLETE  
**Status**: All 5 chunks implemented and tested. 1167 total tests passing.
**Key Files**: `sotd/report/annual_*.py`, `tests/report/test_annual_*.py`
**Key Achievements**:
- Annual report CLI with `--annual`, `--year`, `--range` flags
- Annual template system extending existing templates
- Annual report data loader with validation
- Annual report generator with template processing
- Full integration with error handling and performance monitoring
**Lessons Learned**: Error message wrapping improves UX, integration testing validates complete workflows, type safety with pandas requires proper casting.

#### Phase 3: Annual Delta Calculator ✅ COMPLETE
**Status**: All 3 chunks implemented and tested. 1190 total tests passing.
**Key Files**: `sotd/report/annual_delta_*.py`, `tests/report/test_annual_delta_*.py`
**Key Achievements**:
- AnnualDeltaCalculator for year-over-year delta calculations
- AnnualComparisonLoader for robust comparison data loading
- AnnualReportGenerator with delta integration in table generation
- Multi-year delta columns always present in tables
- Comprehensive error handling and debug output
**Lessons Learned**: Table rendering must include all requested columns, number formatting must handle non-numeric values, TDD catches subtle edge cases.

#### Phase 4: Range Support ✅ COMPLETE
**Status**: All 3 chunks implemented and tested. 1210 total tests passing.
**Key Files**: `sotd/report/annual_run.py`, `sotd/report/cli.py`, `tests/report/test_annual_range_*.py`
**Key Achievements**:
- Annual range CLI support with `--annual --range YYYY:YYYY` format
- Range processing logic in annual_run.py with comprehensive error handling
- Circular import resolution through code refactoring (report_core.py)
- Comprehensive range integration tests with performance validation
- Error propagation improvements (OSError vs RuntimeError)
**Lessons Learned**: 
- Circular imports require careful refactoring and module organization
- Error handling should re-raise specific exceptions (OSError) directly
- CLI validation must be consistent across all phases
- Test expectations must match actual implementation behavior

### Implementation Details for Phase 4

#### Chunk 4.1: Range CLI Support ✅ COMPLETE
- **Objective**: Extend CLI to support year ranges (e.g., 2020:2024)
- **Files**: `sotd/report/cli.py`, `tests/report/test_cli.py`
- **Key Achievements**:
  - Custom ReportCLIParser with annual range validation
  - Support for `YYYY:YYYY` format for annual ranges
  - Comprehensive validation and error handling
  - Backward compatibility with existing CLI patterns
  - All CLI tests updated and passing

#### Chunk 4.2: Range Processing Engine ✅ COMPLETE
- **Objective**: Process multiple years sequentially with error handling
- **Files**: `sotd/report/annual_run.py`, `tests/report/test_annual_range_integration.py`
- **Key Achievements**:
  - Range parsing and validation logic
  - Sequential year processing with error handling
  - Performance monitoring and debug output
  - Integration with existing annual report generation
  - Comprehensive error recovery and partial success handling

#### Chunk 4.3: Range Integration ✅ COMPLETE
- **Objective**: Integrate range support into end-to-end workflows
- **Files**: `sotd/report/run.py`, `sotd/report/report_core.py`, `tests/report/test_annual_range_integration.py`
- **Key Achievements**:
  - Circular import resolution through code refactoring
  - Complete range workflows with error handling
  - Performance testing with large year ranges
  - Integration with existing monthly and annual workflows
  - User experience improvements with clear error messages

### Final Project Status
**All Phases Complete**: The SOTD Pipeline now fully supports annual reports with comprehensive range processing capabilities.

**Key Features Delivered**:
- Annual aggregation with missing month handling
- Annual report generation with delta calculations
- Multi-year range processing (e.g., `--annual --range 2020:2024`)
- Comprehensive error handling and validation
- Full backward compatibility with existing monthly workflows
- Complete test coverage with 1210 passing tests

**Quality Assurance**: All quality checks pass (format, lint, typecheck, test)

## TDD Implementation Philosophy

### Core TDD Principles
- **Test First**: Write tests before implementation for every feature
- **Incremental Testing**: Develop tests incrementally as features are built
- **Red-Green-Refactor**: Write failing test → implement → refactor cycle
- **Test Coverage**: Each chunk includes comprehensive test development
- **Integration Testing**: Test integration points as components are built
- **Error Testing**: Test error scenarios and edge cases throughout development

### Testing Strategy
- **Unit Tests**: Test individual components in isolation
- **Integration Tests**: Test component interactions as they're built
- **Error Tests**: Test error handling and edge cases
- **Performance Tests**: Test performance characteristics
- **Documentation Tests**: Validate documentation accuracy

## Architecture Blueprint

### Core Components
1. **Annual Aggregator**: Extends existing aggregate module to combine 12 months of data
2. **Annual Report Generator**: Extends existing report phase to generate annual reports
3. **Annual Delta Calculator**: Extends existing delta calculation for year-over-year comparisons
4. **Annual Template System**: Extends existing template system for annual report sections
5. **Annual CLI Interface**: Extends existing CLI with `--annual` and `--range` options
6. **Range Processing Engine**: Processes multiple years sequentially with error handling

### Data Flow
1. Monthly aggregated data → Annual aggregator → Annual aggregated data
2. Annual aggregated data → Annual report generator → Annual reports
3. Previous years' data → Annual delta calculator → Year-over-year comparisons
4. Year ranges → Range processor → Multiple annual reports

### File Structure
```
data/
  aggregated/
    annual/              # Annual aggregated data files
      YYYY.json         # Annual data for specific year
  reports/
    YYYY-hardware.md    # Annual hardware reports
    YYYY-software.md    # Annual software reports
sotd/
  aggregate/
    annual_engine.py    # Annual aggregation engine
    annual_loader.py    # Annual data loader
    annual_run.py       # Annual aggregation integration
    cli.py             # CLI with annual/range support
  report/
    annual_delta_calculator.py    # Year-over-year deltas
    annual_comparison_loader.py   # Comparison data loading
    annual_generator.py           # Report generation
    annual_load.py               # Annual data loading
    annual_run.py                # Annual report integration
    report_core.py               # Core monthly report logic
    cli.py                      # CLI with annual/range support
    table_generators/base.py     # Multi-year delta support
tests/
  aggregate/test_annual_*.py     # Annual aggregation tests
  report/test_annual_*.py        # Annual report tests
  report/test_annual_range_*.py  # Range processing tests
  report/test_annual_delta_*.py  # Delta calculation tests
```

## Conclusion
The SOTD Pipeline annual reports feature is now complete with full range support. All phases have been implemented following TDD principles with comprehensive testing and quality assurance. The system provides robust annual report generation with delta calculations and multi-year processing capabilities while maintaining full backward compatibility with existing monthly workflows.