---
description: 
globs: 
alwaysApply: false
---
# Monthly and Annual Reports TDD Implementation Plan

## Project Overview
Extend the existing report phase to support annual reports in addition to monthly reports, providing comprehensive yearly summaries that follow the same patterns and quality as monthly reports.

## Implementation Status and Progress Tracking

### Current Session Progress (2024-06-20)
**Session Goal**: Complete Phase 2 - Chunk 2.1: Annual Report CLI Interface (all CLI, validation, and tests for annual mode passing)
**Status**: ✅ **PHASE 2, CHUNK 2.1 COMPLETE** - All CLI, validation, and tests for annual mode are implemented and passing. Edge cases for mutually exclusive arguments, required arguments, and error messages are handled. CLI now robustly supports --annual, --year, --range, and all error flows.

#### Completed Work
1. **✅ Annual CLI Argument Support**: Added --annual, --year, --range flags to report CLI and parser.
2. **✅ Validation Logic**: Implemented robust validation for annual mode, mutually exclusive arguments, and error flows.
3. **✅ Test Coverage**: All CLI and validation tests for annual mode, edge cases, and error messages are passing. Tests updated to match argparse behavior (SystemExit for mutually exclusive errors, ValueError for custom validation).
4. **✅ Error Handling**: CLI now provides clear error messages for all invalid argument combinations, matching both user and argparse expectations.

#### Lessons Learned
- **Argparse Mutually Exclusive Groups**: When mutually exclusive arguments (e.g., --month and --year) are provided, argparse raises SystemExit before custom validation runs. Tests must expect SystemExit, not ValueError, in these cases.
- **Validation Order**: Required argument checks must come before conflict checks for correct error reporting. This affects which error message is shown for cases like --annual --month.
- **Test Alignment**: Tests must match actual CLI behavior, including error type and message, to avoid false negatives.

#### Technical Decisions Made
- **Test Error Handling**: Updated tests to expect SystemExit for argparse errors and ValueError for custom validation.
- **Annual CLI Robustness**: All edge cases for annual CLI are now covered and validated.

#### Next Steps
- Proceed to **Phase 2: Chunk 2.2 (Annual Template System)**

**Timestamp:** 2024-06-20T23:05:00

### Overall Project Status
- **Phase 1 Progress**: ✅ **COMPLETE** - All 5 chunks implemented and all 70 tests passing
- **Phase 2 Progress**: ✅ **COMPLETE** - All 5 chunks implemented and all tests passing
- **Total Progress**: ~60% of overall implementation
- **Next Milestone**: Complete Phase 3 (Annual Delta Calculator) and begin Phase 4 (Range Support)

### Quality Gates
- **✅ Code Quality**: All new code follows project standards and patterns
- **✅ Test Coverage**: Comprehensive test suite written for CLI functionality
- **✅ Test Results**: All 70 annual tests passing (60 component + 10 integration)
- **✅ Documentation**: Code is well-documented with clear docstrings
- **✅ Backward Compatibility**: All existing functionality preserved

## TDD Implementation Philosophy

### Core TDD Principles
- **Test First**: Write tests before implementation for every feature
- **Incremental Testing**: Develop tests incrementally as features are built
- **Red-Green-Refactor**: Write failing test → implement → refactor cycle
- **Test Coverage**: Each chunk includes comprehensive test development
- **Integration Testing**: Test integration points as components are built
- **Error Testing**: Test error scenarios and edge cases throughout development

### Testing Strategy
- **Unit Tests**: Test individual components in isolation
- **Integration Tests**: Test component interactions as they're built
- **Error Tests**: Test error handling and edge cases
- **Performance Tests**: Test performance characteristics
- **Documentation Tests**: Validate documentation accuracy

## Architecture Blueprint

### Core Components
1. **Annual Aggregator**: Extends existing aggregate module to combine 12 months of data
2. **Annual Report Generator**: Extends existing report phase to generate annual reports
3. **Annual Delta Calculator**: Extends existing delta calculation for year-over-year comparisons
4. **Annual Template System**: Extends existing template system for annual report sections
5. **Annual CLI Interface**: Extends existing CLI with `--annual` and `--range` options

### Data Flow
1. Monthly aggregated data → Annual aggregator → Annual aggregated data
2. Annual aggregated data → Annual report generator → Annual reports
3. Previous years' data → Annual delta calculator → Year-over-year comparisons

### File Structure
```
data/
  aggregated/
    annual/
      2024.json          # Annual aggregated data
    monthly/
      2024-01.json       # Existing monthly data
  reports/
    2024-hardware.md     # Annual hardware report
    2024-software.md     # Annual software report
```

## Implementation Chunks with Incremental Testing

### Phase 1: Foundation - Annual Aggregator Core
**Goal**: Create the core annual aggregation functionality with comprehensive incremental testing.

#### Chunk 1.1: Annual Aggregator CLI Interface ✅ COMPLETE
- **Objective**: Add `--annual` and `--range` flags to existing aggregate CLI
- **Files**: `sotd/aggregate/cli.py`, `tests/aggregate/test_cli.py`
- **Status**: ✅ **COMPLETE** - All CLI functionality working correctly
- **Test Development**:
  - ✅ Test CLI argument parsing for new flags
  - ✅ Test help text generation for new options
  - ✅ Test validation of year parameters
  - ✅ Test backward compatibility with existing monthly functionality
  - ✅ Test error handling for invalid arguments
  - ✅ Test integration with existing CLI patterns
- **Integration**: Extend existing CLI without breaking monthly functionality
- **Achievements**:
  - Range validation supports both monthly and annual formats
  - All validation rules working correctly
  - Backward compatibility fully maintained
  - All 47 tests passing

#### Chunk 1.2: Annual Data Loader ✅ COMPLETE
- **Objective**: Load 12 months of aggregated data for a given year
- **Files**: `sotd/aggregate/annual_loader.py`, `tests/aggregate/test_annual_loader.py`
- **Status**: ✅ **COMPLETE** - Loader implemented and all tests passing
- **Test Development**:
  - ✅ Test loading existing months successfully
  - ✅ Test handling missing months with warnings
  - ✅ Test data structure validation
  - ✅ Test metadata generation for included/excluded months
  - ✅ Test error handling for corrupted files
  - ✅ Test performance with large datasets (mocked)
  - ✅ Test integration with existing data loading patterns
- **Implementation**:
  - Loads all 12 months for a year, validates structure, and tracks missing/corrupted files
  - Generates metadata for included and missing months, and validation errors
  - Follows project error handling and validation patterns
  - All 23 tests passing

#### Chunk 1.3: Annual Aggregation Engine ✅ COMPLETE
- **Objective**: Combine monthly aggregated data into annual summaries
- **Files**: `sotd/aggregate/annual_engine.py`, `tests/aggregate/test_annual_engine.py`
- **Status**: ✅ **COMPLETE** - All code and tests implemented and passing as of 2024-06-19
- **Test Development**:
  - ✅ Test aggregation logic for each product type
  - ✅ Test metadata generation (total_shaves, unique_shavers, avg_shaves_per_user)
  - ✅ Test missing month tracking in metadata
  - ✅ Test data consistency validation
  - ✅ Test edge cases (no data, partial data, single month)
  - ✅ Test performance with full year of data
  - ✅ Test integration with existing aggregation patterns
- **Implementation Summary**:
  - Implemented `AnnualAggregationEngine` with aggregation for razors, blades, brushes, soaps
  - Metadata generation includes total shaves, unique shavers, included/missing months
  - Handles empty, partial, and full data scenarios
  - All tests pass, including edge cases and error handling
- **Lessons Learned**:
  1. Consistent metadata structure is critical for downstream report phases
  2. TDD approach caught edge cases early (e.g., missing months, empty data)
  3. Mocking and patching enabled robust CLI and workflow testing
  4. Maintaining strict test coverage ensures future refactors are safe
- **Technical Decisions**:
  1. Used pandas for efficient aggregation and sorting
  2. Kept aggregation logic modular for future extension (e.g., new categories)
  3. Followed project error handling and validation patterns
- **Timestamp**: 2024-06-19

#### Chunk 1.4: Annual Data Saver ✅ COMPLETE
- **Objective**: Save annual aggregated data with proper metadata
- **Files**: `sotd/aggregate/annual_engine.py` (save_annual_data function), `tests/aggregate/test_annual_save.py`
- **Status**: ✅ **COMPLETE** - All 14 tests passing as of 2024-06-20T23:09:45
- **Test Development**:
  - ✅ Test file format and structure validation
  - ✅ Test metadata structure completeness
  - ✅ Test error handling for file system issues
  - ✅ Test file permissions and security
  - ✅ Test output file validation
  - ✅ Test integration with existing save patterns
  - ✅ Test performance with large datasets
- **Implementation**: `save_annual_data` function implemented in `annual_engine.py` with full validation, directory creation, and unified file I/O
- **Integration**: Follows existing save patterns and uses project's unified file I/O utilities

#### Chunk 1.5: Annual Aggregator Integration ✅ COMPLETE
- **Objective**: Wire together annual aggregation components
- **Files**: `sotd/aggregate/annual_run.py`, `tests/aggregate/test_annual_integration.py`
- **Status**: ✅ **COMPLETE** - All 10 integration tests passing as of 2024-06-20T23:09:42

**Status:**
- **Phase 1 is now COMPLETE.**
- All 70 tests (60 component + 10 integration) are PASSING as of 2024-06-20T23:09:45.

**Key Implementation Decisions & Lessons Learned:**
- Standardized all product category data to use list-of-dicts format for both monthly and annual aggregation, ensuring consistency across loader, engine, and tests.
- Updated loader validation logic to expect and enforce list-of-dicts, matching the aggregation engine and test data.
- Fixed function signature mismatches in tests to match the actual save_annual_data signature.
- Used print-based debug output for CLI integration tests, capturing stdout for assertions.
- Improved error handling: corrupted JSON files are now treated as missing months, not fatal errors, ensuring robust annual aggregation even with partial/corrupt data.
- All integration and performance tests now reflect real-world data flow and structure.
- **Save Function Location**: The `save_annual_data` function is implemented in `annual_engine.py` rather than a separate `annual_save.py` file, which is more efficient and follows the project's pattern of keeping related functionality together.

**Next Steps:**
- Proceed to Phase 2: Chunk 2.2 (Annual Template System)

**Timestamp:** 2024-06-20T23:09:45

### Phase 2: Report Generation - Annual Reports Core
**Goal**: Create annual report generation with template support and incremental testing.

#### Chunk 2.1: Annual Report CLI Interface ✅ COMPLETE
- **Objective**: Add `--annual` flag to existing report CLI
- **Files**: `sotd/report/cli.py`, `tests/report/test_cli.py`
- **Status**: ✅ **COMPLETE** - All CLI, validation, and tests for annual mode are implemented and passing as of 2024-06-20T23:18:30. Validation order was fixed to check for conflicts before required arguments, and tests were updated to expect SystemExit for mutually exclusive arguments and ValueError for custom validation. All 56 CLI tests are now passing, including edge cases and error flows. CLI robustly supports --annual, --year, --range, and all error flows.
- **Test Development**:
  - ✅ Test CLI argument parsing for annual flag
  - ✅ Test help text generation for annual options
  - ✅ Test validation of year parameters
  - ✅ Test backward compatibility with monthly reports
  - ✅ Test automatic annual aggregation triggering
  - ✅ Test error handling for invalid arguments
  - ✅ Test integration with existing CLI patterns
- **Integration**: CLI extended without breaking monthly functionality
- **Lessons Learned**:
  - Validation order is critical for correct error reporting (conflicts before required args)
  - Tests must match actual argparse behavior (SystemExit for mutually exclusive, ValueError for custom)
  - TDD caught subtle edge cases in CLI argument handling
- **Timestamp:** 2024-06-20T23:18:30

#### Chunk 2.2: Annual Template System ✅ COMPLETE
- **Objective**: Extend template system to support annual report sections
- **Files**: `data/report_templates.yaml`, `sotd/utils/template_processor.py`, `tests/report/test_annual_templates.py`
- **Status**: ✅ **COMPLETE** - All annual template system tests passing as of 2024-06-20T23:12:38
- **Test Development**:
  - ✅ Test template loading for annual sections
  - ✅ Test variable substitution in annual templates
  - ✅ Test section validation and structure
  - ✅ Test integration with existing template system
  - ✅ Test error handling for malformed templates
  - ✅ Test template performance and caching
  - ✅ Test backward compatibility with monthly templates
- **Implementation**:
  - Annual templates (e.g., `annual_hardware`, `annual_software`) now supported in YAML
  - TemplateProcessor supports loading, variable substitution, and table placeholders for annual sections
  - All tests for annual template system, including error handling and integration, are passing
- **Lessons Learned**:
  - The template system is robust to malformed templates (unclosed braces are passed through)
  - Backward compatibility with monthly templates is preserved
  - Table placeholder extraction and variable substitution work for both monthly and annual templates
- **Timestamp:** 2024-06-20T23:12:38

#### Chunk 2.3: Annual Report Data Loader ✅ COMPLETE
- **Objective**: Load annual aggregated data for report generation
- **Files**: `sotd/report/annual_load.py`, `tests/report/test_annual_load.py`
- **Status**: ✅ **COMPLETE** - Loader implemented, validated, and all tests passing as of 2024-06-20T23:24:00
- **Test Development**:
  - ✅ Test loading annual aggregated data successfully
  - ✅ Test data structure and metadata validation
  - ✅ Test error handling for missing/corrupted data
  - ✅ Test performance with large datasets
  - ✅ Test integration with existing load patterns
  - ✅ Test error messages and user feedback
- **Implementation**:
  - Created `annual_load.py` with `load_annual_data`, `get_annual_file_path`, and validation helpers
  - Comprehensive tests in `test_annual_load.py` for all edge cases, error handling, and integration
  - Loader matches monthly loader patterns for consistency
  - All 21 annual loader tests passing, full suite (1143 tests) passing
- **Lessons Learned**:
  1. Consistent loader/test patterns across phases simplify future maintenance
  2. Early, strict validation of structure and types prevents downstream errors
  3. TDD approach caught subtle edge cases (e.g., extra fields, type errors, corrupted files)
  4. Type and lint checks must be kept clean for all new code; use `# type: ignore` for intentional test violations
- **Technical Decisions**:
  1. Loader returns (metadata, data) tuple for compatibility with report phase
  2. Extra fields in annual data are allowed for forward compatibility
  3. Validation helpers are public for use in future report/delta code
- **Timestamp:** 2024-06-20T23:24:00

#### Chunk 2.4: Annual Report Generator ✅ COMPLETE
- **Objective**: Generate annual reports using templates and data
- **Files**: `sotd/report/annual_generator.py`, `tests/report/test_annual_generator.py`
- **Status**: ✅ **COMPLETE** - All code and tests implemented and passing as of 2024-06-20T23:45:00
- **Test Development**:
  - ✅ Test report generation with valid annual data and template (PASSING)
  - ✅ Test error handling for missing data (PASSING)
  - ✅ Test error handling for invalid/malformed template (PASSING)
  - ✅ Test extra fields in data/template (PASSING)
  - ✅ Test performance with large datasets (PASSING)
  - ✅ Test integration with loader and template processor (PASSING)
- **Implementation**:
  - Implemented `generate_annual_report` to load annual data, process annual template, and generate report
  - Added annual templates to `report_templates.yaml` for both hardware and software
  - Test verifies correct output, variable substitution, table placeholder rendering, and full integration
- **Lessons Learned**:
  1. Annual loader and template system integrate smoothly with existing report patterns
  2. Template variables for annual reports must handle both int and list for included/missing months (robustness)
  3. TDD approach ensures each feature is validated before moving to the next
  4. Error handling for missing data is robust and matches user expectations (FileNotFoundError)
  5. Error handling for missing/malformed templates is robust and matches user expectations (KeyError)
  6. Extra fields in data and templates are handled gracefully (forward compatibility)
  7. Report generation is performant for large annual datasets (<5s for 100 products per category)
  8. Integration test now covers the complete workflow from data loading through template processing to final report output, verifying all key integration points.
- **Timestamp:** 2024-06-20T23:45:00

#### Chunk 2.5: Annual Report Integration ✅ COMPLETE
- **Objective**: Wire together annual report components
- **Files**: `sotd/report/annual_run.py`, `tests/report/test_annual_integration.py`
- **Status**: ✅ **COMPLETE** - All 18 integration tests passing as of 2024-06-20T23:10:20
- **Test Development**:
  - ✅ Test end-to-end annual report generation workflow
  - ✅ Test CLI integration and error flow
  - ✅ Test component interaction and data flow
  - ✅ Test logging and progress reporting
  - ✅ Test error handling across components
  - ✅ Test performance of complete workflow
  - ✅ Test integration with existing report module
- **Implementation**:
  - Created `annual_run.py` with `run_annual_report`, `save_annual_report`, and `main` functions
  - Comprehensive integration tests in `test_annual_integration.py` covering all workflows and error scenarios
  - Integration follows existing patterns and provides proper error handling and user feedback
  - All 18 integration tests passing, full suite (1167 tests) passing
- **Lessons Learned**:
  1. Error message wrapping in integration layer provides better user experience
  2. Tests must match actual error handling behavior (wrapped vs unwrapped exceptions)
  3. Integration tests validate complete workflows from CLI through to file output
  4. Performance monitoring integration works seamlessly with annual report generation
- **Technical Decisions**:
  1. Wrapped original exceptions with descriptive messages for better user experience
  2. Maintained consistent error handling patterns with existing report module
  3. Used performance monitoring throughout the workflow
- **Timestamp:** 2024-06-20T23:10:20

**Status:**
- **Phase 2 is now COMPLETE.**
- All 5 chunks (2.1-2.5) are implemented and all tests are PASSING as of 2024-06-20T23:10:20.

**Key Implementation Decisions & Lessons Learned:**
- Annual report CLI interface supports --annual, --year, --range flags with robust validation
- Annual template system extends existing templates with annual-specific sections
- Annual data loader follows consistent patterns with monthly loader for maintainability
- Annual report generator integrates smoothly with existing template and data loading systems
- Annual report integration provides complete end-to-end workflow with proper error handling
- All integration tests validate complete workflows and error scenarios
- Error message wrapping in integration layer improves user experience while maintaining testability
- Performance monitoring integration works seamlessly across all components

**Next Steps:**
- Proceed to Phase 3: Chunk 3.1 (Annual Delta Calculator)

**Timestamp:** 2024-06-20T23:10:20

### Phase 3: Delta Calculations - Year-over-Year Comparisons
**Goal**: Add year-over-year delta calculation support with comprehensive testing.

#### Chunk 3.1: Annual Delta Calculator 🔄 PENDING
- **Objective**: Calculate year-over-year deltas for annual reports
- **Files**: `sotd/report/annual_delta_calculator.py`, `tests/report/test_annual_delta_calculator.py`
- **Status**: 🔄 **PENDING** - Depends on Phase 2 completion
- **Test Development**:
  - Test delta calculations for each product type
  - Test comparison periods (2023, 2022, 2020)
  - Test data validation and integrity
  - Test error handling for missing comparison data
  - Test performance with large datasets
  - Test integration with existing delta calculation patterns
  - Test edge cases and boundary conditions

#### Chunk 3.2: Annual Comparison Data Loader
- **Objective**: Load previous years' data for delta calculations
- **Files**: `sotd/report/annual_comparison_loader.py`, `tests/report/test_annual_comparison_loader.py`
- **Test Development**:
  - Test loading comparison data for multiple years
  - Test handling missing years with warnings
  - Test data structure validation
  - Test performance with multiple years of data
  - Test integration with existing comparison loading patterns
  - Test error handling and user feedback
  - Test data integrity validation
- **Integration**: Reuse existing comparison loading patterns

#### Chunk 3.3: Annual Delta Integration
- **Objective**: Integrate delta calculations into annual report generation
- **Files**: `sotd/report/annual_generator.py`, `tests/report/test_annual_delta_integration.py`
- **Test Development**:
  - Test delta integration in report generation
  - Test table generation with delta columns
  - Test formatting and alignment of delta data
  - Test output accuracy and quality validation
  - Test performance with delta calculations
  - Test error handling during delta integration
  - Test integration with existing table generation patterns
- **Integration**: Extend existing report generation

### Phase 4: Range Support - Multi-Year Processing
**Goal**: Add support for processing multiple years in sequence with comprehensive testing.

#### Chunk 4.1: Range Processor
- **Objective**: Process multiple years sequentially
- **Files**: `sotd/aggregate/range_processor.py`, `tests/aggregate/test_range_processor.py`
- **Test Development**:
  - Test range validation and parameter checking
  - Test sequential processing of multiple years
  - Test handling missing years with warnings
  - Test progress reporting and summaries
  - Test performance with large year ranges
  - Test integration with existing processing patterns
  - Test error handling and recovery
- **Integration**: Extend existing aggregate functionality

#### Chunk 4.2: Range Report Generator
- **Objective**: Generate reports for multiple years
- **Files**: `sotd/report/range_generator.py`, `tests/report/test_range_generator.py`
- **Test Development**:
  - Test multi-year report generation
  - Test file naming and organization
  - Test progress reporting and summaries
  - Test performance with multiple years
  - Test integration with existing report generation patterns
  - Test error handling and recovery
  - Test output validation and quality
- **Integration**: Extend existing report functionality

#### Chunk 4.3: Range Integration
- **Objective**: Integrate range processing into CLI
- **Files**: `sotd/aggregate/cli.py`, `sotd/report/cli.py`, `tests/aggregate/test_range_integration.py`, `tests/report/test_range_integration.py`
- **Test Development**:
  - Test CLI range processing functionality
  - Test end-to-end range functionality
  - Test user feedback and progress reporting
  - Test error handling with clear messages
  - Test integration with existing CLI patterns
  - Test performance and responsiveness
  - Test comprehensive range functionality validation
- **Integration**: Complete range support

### Phase 5: Quality Assurance - Comprehensive Testing and Documentation
**Goal**: Ensure comprehensive testing and documentation with final validation.

#### Chunk 5.1: Integration Testing Suite
- **Objective**: Comprehensive integration tests for all annual functionality
- **Files**: `tests/integration/test_annual_integration.py`
- **Test Development**:
  - Test complete annual aggregation workflows
  - Test complete annual report generation workflows
  - Test range processing workflows
  - Test error scenarios and edge cases
  - Test data integrity and output quality
  - Test performance under various conditions
  - Test comprehensive coverage of all functionality
- **Integration**: Validate complete annual functionality

#### Chunk 5.2: Documentation Testing and Updates
- **Objective**: Update all relevant documentation with validation
- **Files**: `docs/report_phase_spec.md`, `docs/aggregate_phase_spec.md`, README updates
- **Test Development**:
  - Test documentation accuracy and completeness
  - Test usage examples and CLI documentation
  - Test code examples and explanations
  - Test integration with existing documentation patterns
  - Test documentation quality and readability
  - Test documentation validation and testing
  - Test comprehensive documentation coverage
- **Integration**: Ensure documentation reflects new functionality

#### Chunk 5.3: Performance and Quality Validation
- **Objective**: Validate performance and code quality
- **Files**: Performance tests, quality checks
- **Test Development**:
  - Test performance benchmarks and metrics
  - Test code quality metrics and standards
  - Test production readiness validation
  - Test comprehensive quality checks
  - Test functionality validation under load
  - Test error handling under stress
  - Test final validation and testing
- **Integration**: Ensure production readiness

## TDD Implementation Prompts with Incremental Testing

### Prompt 1: Annual Aggregator CLI Interface
```text
Implement the annual aggregator CLI interface by extending the existing aggregate CLI to support `--annual` and `--range` flags. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for CLI argument parsing, help text, and validation
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to modify:
- sotd/aggregate/cli.py
- tests/aggregate/test_cli.py

Test Development Requirements:
- Test CLI argument parsing for new flags
- Test help text generation for new options
- Test validation of year parameters
- Test backward compatibility with existing monthly functionality
- Test error handling for invalid arguments
- Test integration with existing CLI patterns

Implementation Requirements:
- Add `--annual` flag for annual aggregation
- Add `--year YYYY` parameter for specific year
- Add `--range:YYYY:YYYY` parameter for year range
- Maintain existing `--month` functionality
- Add proper help text and validation
- Follow existing CLI patterns and error handling
```

### Prompt 2: Annual Data Loader
```text
Implement the annual data loader that loads 12 months of aggregated data for a given year. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for loading existing months, handling missing months, and data validation
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/aggregate/annual_loader.py
- tests/aggregate/test_annual_loader.py

Test Development Requirements:
- Test loading existing months successfully
- Test handling missing months with warnings
- Test data structure validation
- Test metadata generation for included/excluded months
- Test error handling for corrupted files
- Test performance with large datasets
- Test integration with existing data loading patterns

Implementation Requirements:
- Load monthly aggregated files for specified year
- Handle missing months with warnings
- Validate data structure matches expected format
- Return structured data with metadata about included/excluded months
- Follow existing data loading patterns
- Include comprehensive error handling
```

### Prompt 3: Annual Aggregation Engine
```text
Implement the annual aggregation engine that combines monthly aggregated data into annual summaries. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for aggregation logic, metadata generation, and missing month tracking
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/aggregate/annual_engine.py
- tests/aggregate/test_annual_engine.py

Test Development Requirements:
- Test aggregation logic for each product type
- Test metadata generation (total_shaves, unique_shavers, avg_shaves_per_user)
- Test missing month tracking in metadata
- Test data consistency validation
- Test edge cases (no data, partial data, single month)
- Test performance with full year of data
- Test integration with existing aggregation patterns

Implementation Requirements:
- Combine 12 months of aggregated data
- Generate annual metadata (total_shaves, unique_shavers, avg_shaves_per_user)
- Track missing months in metadata
- Follow existing aggregation patterns for each product type
- Ensure data consistency and validation
- Handle edge cases (no data, partial data, etc.)
```

### Prompt 4: Annual Data Saver
```text
Implement the annual data saver that saves annual aggregated data with proper metadata. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for file format, metadata structure, and error handling
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/aggregate/annual_save.py
- tests/aggregate/test_annual_save.py

Test Development Requirements:
- Test file format and structure validation
- Test metadata structure completeness
- Test error handling for file system issues
- Test file permissions and security
- Test output file validation
- Test integration with existing save patterns
- Test performance with large datasets

Implementation Requirements:
- Save annual aggregated data to `data/aggregated/annual/YYYY.json`
- Include comprehensive metadata (year, total_shaves, unique_shavers, avg_shaves_per_user, missing_months, included_months)
- Follow existing save patterns and error handling
- Ensure proper file permissions and error handling
- Validate output file structure
```

### Prompt 5: Annual Aggregator Integration
```text
Wire together the annual aggregation components into a complete system. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for end-to-end annual aggregation, CLI integration
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/aggregate/annual_run.py
- tests/aggregate/test_annual_integration.py

Test Development Requirements:
- Test end-to-end annual aggregation workflow
- Test CLI integration and error flow
- Test component interaction and data flow
- Test logging and progress reporting
- Test error handling across components
- Test performance of complete workflow
- Test integration with existing aggregate module

Implementation Requirements:
- Integrate annual loader, engine, and saver
- Handle CLI integration and error flow
- Provide proper logging and progress reporting
- Follow existing integration patterns
- Ensure comprehensive error handling
- Include proper validation and testing
```

### Prompt 6: Annual Report CLI Interface
```text
Implement the annual report CLI interface by extending the existing report CLI to support `--annual` flag. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for CLI argument parsing, help text, and validation
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to modify:
- sotd/report/cli.py
- tests/report/test_cli.py

Test Development Requirements:
- Test CLI argument parsing for annual flag
- Test help text generation for annual options
- Test validation of year parameters
- Test backward compatibility with monthly reports
- Test automatic annual aggregation triggering
- Test error handling for invalid arguments
- Test integration with existing CLI patterns

Implementation Requirements:
- Add `--annual` flag for annual reports
- Add `--year YYYY` parameter for specific year
- Maintain existing `--month` functionality
- Add proper help text and validation
- Follow existing CLI patterns and error handling
- Ensure automatic annual aggregation when needed
```

### Prompt 7: Annual Template System
```text
Extend the template system to support annual report sections. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for template loading, variable substitution, and section validation
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to modify:
- data/report_templates.yaml
- sotd/report/annual_templates.py (new)
- tests/report/test_annual_templates.py (new)

Test Development Requirements:
- Test template loading for annual sections
- Test variable substitution in annual templates
- Test section validation and structure
- Test integration with existing template system
- Test error handling for malformed templates
- Test template performance and caching
- Test backward compatibility with monthly templates

Implementation Requirements:
- Extend existing template file with annual sections
- Support same variables as monthly templates
- Include annual-specific template sections
- Follow existing template patterns and validation
- Ensure proper variable substitution
- Include comprehensive error handling
```

### Prompt 8: Annual Report Data Loader
```text
Implement the annual report data loader that loads annual aggregated data for report generation. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for data loading, validation, and error handling
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/report/annual_load.py
- tests/report/test_annual_load.py

Test Development Requirements:
- Test loading annual aggregated data successfully
- Test data structure validation
- Test error handling for missing data
- Test data integrity validation
- Test performance with large datasets
- Test integration with existing load patterns
- Test error messages and user feedback

Implementation Requirements:
- Load annual aggregated data from `data/aggregated/annual/YYYY.json`
- Validate data structure and format
- Handle missing data with proper error messages
- Follow existing load patterns
- Include comprehensive error handling
- Ensure data integrity validation
```

### Prompt 9: Annual Report Generator
```text
Implement the annual report generator that creates annual reports using templates and data. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for report generation, template processing, and output validation
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/report/annual_generator.py
- tests/report/test_annual_generator.py

Test Development Requirements:
- Test report generation with valid data
- Test template processing and variable substitution
- Test output validation and quality
- Test table generation and formatting
- Test error handling during generation
- Test performance with complex reports
- Test integration with existing report generation patterns

Implementation Requirements:
- Generate annual reports using templates and data
- Follow existing report generation patterns
- Include proper table generation and formatting
- Handle template processing and variable substitution
- Ensure output validation and quality
- Include comprehensive error handling
```

### Prompt 10: Annual Report Integration
```text
Wire together the annual report components into a complete system. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for end-to-end annual report generation, CLI integration
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/report/annual_run.py
- tests/report/test_annual_integration.py

Test Development Requirements:
- Test end-to-end annual report generation workflow
- Test CLI integration and error flow
- Test component interaction and data flow
- Test logging and progress reporting
- Test error handling across components
- Test performance of complete workflow
- Test integration with existing report module

Implementation Requirements:
- Integrate annual loader, generator, and templates
- Handle CLI integration and error flow
- Provide proper logging and progress reporting
- Follow existing integration patterns
- Ensure comprehensive error handling
- Include proper validation and testing
```

### Prompt 11: Annual Delta Calculator
```text
Implement the annual delta calculator for year-over-year comparisons. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for delta calculations, comparison periods, and data validation
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/report/annual_delta_calculator.py
- tests/report/test_annual_delta_calculator.py

Test Development Requirements:
- Test delta calculations for each product type
- Test comparison periods (2023, 2022, 2020)
- Test data validation and integrity
- Test error handling for missing comparison data
- Test performance with large datasets
- Test integration with existing delta calculation patterns
- Test edge cases and boundary conditions

Implementation Requirements:
- Calculate year-over-year deltas for annual reports
- Support comparison periods (2023, 2022, 2020)
- Follow existing delta calculation patterns
- Handle missing comparison data gracefully
- Ensure proper data validation
- Include comprehensive error handling
```

### Prompt 12: Annual Comparison Data Loader
```text
Implement the annual comparison data loader that loads previous years' data for delta calculations. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for loading comparison data, handling missing years, and validation
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/report/annual_comparison_loader.py
- tests/report/test_annual_comparison_loader.py

Test Development Requirements:
- Test loading comparison data for multiple years
- Test handling missing years with warnings
- Test data structure validation
- Test performance with multiple years of data
- Test integration with existing comparison loading patterns
- Test error handling and user feedback
- Test data integrity validation

Implementation Requirements:
- Load previous years' annual aggregated data
- Handle missing years with warnings
- Validate data structure and format
- Follow existing comparison loading patterns
- Include comprehensive error handling
- Ensure data integrity validation
```

### Prompt 13: Annual Delta Integration
```text
Integrate delta calculations into annual report generation. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for delta integration, table generation with deltas, and output validation
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to modify:
- sotd/report/annual_generator.py
- tests/report/test_annual_delta_integration.py

Test Development Requirements:
- Test delta integration in report generation
- Test table generation with delta columns
- Test formatting and alignment of delta data
- Test output accuracy and quality validation
- Test performance with delta calculations
- Test error handling during delta integration
- Test integration with existing table generation patterns

Implementation Requirements:
- Integrate delta calculations into annual report generation
- Add delta columns to tables (Δ vs 2023, Δ vs 2022, Δ vs 2020)
- Follow existing table generation patterns
- Ensure proper formatting and alignment
- Include comprehensive error handling
- Validate output accuracy and quality
```

### Prompt 14: Range Processor
```text
Implement the range processor for multi-year processing. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for range validation, sequential processing, and error handling
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/aggregate/range_processor.py
- tests/aggregate/test_range_processor.py

Test Development Requirements:
- Test range validation and parameter checking
- Test sequential processing of multiple years
- Test handling missing years with warnings
- Test progress reporting and summaries
- Test performance with large year ranges
- Test integration with existing processing patterns
- Test error handling and recovery

Implementation Requirements:
- Process multiple years sequentially
- Validate year ranges and parameters
- Handle missing years with warnings
- Provide progress reporting and summaries
- Follow existing processing patterns
- Include comprehensive error handling
```

### Prompt 15: Range Report Generator
```text
Implement the range report generator for multi-year report generation. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for multi-year report generation, file naming, and output validation
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- sotd/report/range_generator.py
- tests/report/test_range_generator.py

Test Development Requirements:
- Test multi-year report generation
- Test file naming and organization
- Test progress reporting and summaries
- Test performance with multiple years
- Test integration with existing report generation patterns
- Test error handling and recovery
- Test output validation and quality

Implementation Requirements:
- Generate reports for multiple years
- Create separate files for each year
- Follow existing file naming conventions
- Provide progress reporting and summaries
- Follow existing report generation patterns
- Include comprehensive error handling
```

### Prompt 16: Range Integration
```text
Integrate range processing into CLI interfaces. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for CLI range processing and end-to-end range functionality
2. **Implement minimal code** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for edge cases and error scenarios
5. **Implement additional functionality** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to modify:
- sotd/aggregate/cli.py
- sotd/report/cli.py
- tests/aggregate/test_range_integration.py
- tests/report/test_range_integration.py

Test Development Requirements:
- Test CLI range processing functionality
- Test end-to-end range functionality
- Test user feedback and progress reporting
- Test error handling with clear messages
- Test integration with existing CLI patterns
- Test performance and responsiveness
- Test comprehensive range functionality validation

Implementation Requirements:
- Integrate range processing into CLI interfaces
- Provide proper user feedback and progress reporting
- Handle errors gracefully with clear messages
- Follow existing CLI patterns
- Ensure comprehensive error handling
- Validate complete range functionality
```

### Prompt 17: Integration Testing Suite
```text
Create comprehensive integration tests for all annual functionality. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for end-to-end workflows, error scenarios, and edge cases
2. **Implement minimal test infrastructure** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for additional scenarios and edge cases
5. **Implement additional test infrastructure** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive test coverage

Files to create:
- tests/integration/test_annual_integration.py

Test Development Requirements:
- Test complete annual aggregation workflows
- Test complete annual report generation workflows
- Test range processing workflows
- Test error scenarios and edge cases
- Test data integrity and output quality
- Test performance under various conditions
- Test comprehensive coverage of all functionality

Implementation Requirements:
- Create comprehensive integration test suite
- Test all major workflows and scenarios
- Validate data integrity and output quality
- Test error handling and edge cases
- Ensure production readiness
- Provide comprehensive coverage
```

### Prompt 18: Documentation Testing and Updates
```text
Update all relevant documentation to reflect new annual functionality. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for documentation accuracy, completeness, and examples
2. **Implement minimal documentation updates** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for additional documentation requirements
5. **Implement additional documentation** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive documentation coverage

Files to modify:
- docs/report_phase_spec.md
- docs/aggregate_phase_spec.md
- README files and usage examples

Test Development Requirements:
- Test documentation accuracy and completeness
- Test usage examples and CLI documentation
- Test code examples and explanations
- Test integration with existing documentation patterns
- Test documentation quality and readability
- Test documentation validation and testing
- Test comprehensive documentation coverage

Implementation Requirements:
- Update all documentation to include annual functionality
- Add usage examples and CLI documentation
- Ensure accuracy and completeness
- Follow existing documentation patterns
- Include proper examples and explanations
- Validate documentation quality
```

### Prompt 19: Performance and Quality Validation
```text
Validate performance and code quality for production readiness. Follow strict TDD approach with incremental testing:

1. **Write failing tests first** for performance benchmarks, code quality metrics, and production readiness
2. **Implement minimal validation infrastructure** to make tests pass
3. **Refactor** while keeping tests green
4. **Add more tests** for additional quality requirements
5. **Implement additional validation** to make new tests pass
6. **Repeat** until all requirements are met with comprehensive quality validation

Requirements:
- Create performance benchmarks
- Validate code quality metrics
- Ensure production readiness
- Run comprehensive quality checks
- Validate all functionality works correctly
- Ensure documentation is complete and accurate

Test Development Requirements:
- Test performance benchmarks and metrics
- Test code quality metrics and standards
- Test production readiness validation
- Test comprehensive quality checks
- Test functionality validation under load
- Test error handling under stress
- Test final validation and testing

Implementation Requirements:
- Create performance benchmarks
- Validate code quality metrics
- Ensure production readiness
- Run comprehensive quality checks
- Validate all functionality works correctly
- Ensure documentation is complete and accurate
```

## Success Criteria

### Functional Requirements
- [ ] Annual aggregation works correctly with `--annual --year 2024`
- [ ] Annual reports generate properly with `--annual --year 2024 --type hardware`
- [ ] Range processing works with `--annual --range:2021:2024`
- [ ] Year-over-year delta calculations show meaningful insights
- [ ] Missing months are handled gracefully with clear reporting
- [ ] All functionality follows existing patterns and quality standards

### Quality Requirements
- [ ] All code follows TDD approach with comprehensive incremental testing
- [ ] All quality checks pass (`make format lint typecheck test`)
- [ ] Documentation is complete and accurate with validation
- [ ] Performance meets production requirements
- [ ] Error handling is robust and user-friendly
- [ ] Code follows existing patterns and conventions

### Integration Requirements
- [ ] Annual functionality integrates seamlessly with existing monthly functionality
- [ ] CLI interfaces are consistent and user-friendly
- [ ] Data formats are consistent with existing patterns
- [ ] Error messages are clear and actionable
- [ ] Progress reporting is informative and helpful

## Implementation Notes

### TDD Approach with Incremental Testing
- **Test First**: Write failing tests before any implementation
- **Incremental Development**: Add tests incrementally as features are built
- **Red-Green-Refactor**: Strict adherence to TDD cycle
- **Comprehensive Coverage**: Each chunk includes extensive test development
- **Integration Testing**: Test integration points as components are built
- **Error Testing**: Test error scenarios and edge cases throughout development

### Quality Standards
- Follow existing code patterns and conventions
- Maintain backward compatibility
- Ensure comprehensive error handling
- Include proper logging and progress reporting
- Validate all outputs and data integrity

### Integration Strategy
- Extend existing modules rather than creating new ones
- Reuse existing patterns and utilities
- Maintain consistent interfaces and data formats
- Ensure seamless integration with existing functionality

### Testing Strategy
- **Unit Tests**: Test individual components in isolation
- **Integration Tests**: Test component interactions as they're built
- **Error Tests**: Test error handling and edge cases
- **Performance Tests**: Test performance characteristics
- **Documentation Tests**: Validate documentation accuracy
- **Incremental Development**: Build tests incrementally with each feature

## Memory and Resume Prompt for New Chat Sessions

### Current Project Status Memory
**Project**: SOTD Pipeline - Monthly and Annual Reports Implementation
**Current Phase**: Phase 2 - Report Generation (Annual Reports Core)
**Current Chunk**: Chunk 2.5 - Annual Report Integration (NEXT)
**Overall Progress**: ~60% complete (Phase 1 complete, Phase 2 in progress)

**Completed Work**:
- ✅ **Phase 1 Complete**: Annual Aggregator Core (5 chunks, 70 tests passing)
  - Annual CLI, loader, engine, saver, and integration all working
- ✅ **Phase 2, Chunks 2.1-2.4 Complete**: Annual Report Core (4 chunks)
  - Annual CLI interface, template system, data loader, and report generator all working
- 🔄 **Phase 2, Chunk 2.5**: Annual Report Integration (IN PROGRESS - NEXT)

**Key Technical Decisions Made**:
1. Annual data uses same JSON structure as monthly data for consistency
2. Template system extended with annual sections (annual_hardware, annual_software)
3. Error handling follows existing patterns (FileNotFoundError, KeyError, ValueError)
4. All components follow existing project patterns and naming conventions
5. Comprehensive test coverage with both unit and integration tests

**Current Test Status**:
- All 70 annual aggregator tests passing
- All 232 report tests passing (including new annual tests)
- All quality checks (format, lint, typecheck) passing for new code

**Next Immediate Task**: Implement Phase 2, Chunk 2.5 - Annual Report Integration
- Create `sotd/report/annual_run.py` for end-to-end annual report workflow
- Create `tests/report/test_annual_integration.py` for integration testing
- Wire together annual generator, loader, and CLI components

### Resume Prompt for New Chat

```text
I'm working on the SOTD Pipeline project implementing annual reports functionality. Here's where I am:

**Current Status**: Phase 2, Chunk 2.5 - Annual Report Integration (NEXT TASK)
**Project**: Monthly and Annual Reports TDD Implementation
**Repository**: /Users/jmoore/Documents/Projects/sotd_pipeline

**What's Been Completed**:
- Phase 1: Annual Aggregator Core (5 chunks, 70 tests) ✅ COMPLETE
- Phase 2, Chunks 2.1-2.4: Annual Report Core (4 chunks) ✅ COMPLETE
  - Annual CLI interface with --annual, --year, --range flags
  - Annual template system with hardware/software sections
  - Annual data loader with validation and error handling
  - Annual report generator with comprehensive test coverage

**Current Task**: Phase 2, Chunk 2.5 - Annual Report Integration
- Objective: Wire together annual report components into complete system
- Files: `sotd/report/annual_run.py`, `tests/report/test_annual_integration.py`
- Status: Ready to implement (all dependencies complete)

**Key Context**:
- Follow TDD approach: write tests first, implement, refactor
- All new code must pass quality checks (format, lint, typecheck)
- Use --force flag for testing pipeline phases
- Follow existing project patterns and error handling
- Update plan file after completing each task
- All tests must pass before considering task complete

**Technical Stack**:
- Python 3.11, pytest, Black, Ruff, Pyright
- Existing report phase with monthly functionality
- Template system with YAML-based templates
- Data flow: monthly aggregated → annual aggregated → annual reports

**Next Steps After 2.5**:
- Phase 3: Delta Calculations (year-over-year comparisons)
- Phase 4: Range Support (multi-year processing)
- Phase 5: Quality Assurance (comprehensive testing)

Please help me implement Phase 2, Chunk 2.5 - Annual Report Integration following the TDD approach and project standards.
```

### Project Context for AI Assistant

**Codebase Structure**:
- Main pipeline phases: fetch, extract, match, enrich, aggregate, report
- Annual functionality extends existing monthly functionality
- All new code follows existing patterns and conventions
- Comprehensive test coverage required for all new functionality

**Development Workflow**:
1. Write failing tests first (TDD approach)
2. Implement minimal code to make tests pass
3. Refactor while keeping tests green
4. Add more tests for edge cases and error scenarios
5. Run quality checks before committing
6. Update plan file with progress and lessons learned

**Quality Standards**:
- All code must pass `make format lint typecheck`
- All tests must pass before task completion
- Follow existing error handling patterns
- Maintain backward compatibility
- Use descriptive variable names and clear documentation

**Key Files for Current Task**:
- `plans/monthly_annual_reports_tdd_plan.mdc` - Implementation plan and progress tracking
- `sotd/report/annual_generator.py` - Annual report generator (complete)
- `sotd/report/annual_load.py` - Annual data loader (complete)
- `sotd/report/cli.py` - Annual CLI interface (complete)
- `tests/report/test_annual_generator.py` - Annual generator tests (complete)

**Resume Command**: Continue with Phase 2, Chunk 2.5 implementation following TDD approach
