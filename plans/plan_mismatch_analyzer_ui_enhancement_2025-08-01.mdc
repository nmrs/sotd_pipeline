# MismatchAnalyzer UI Enhancement Plan

## üìò Project Summary
Enhance the MismatchAnalyzer UI to reduce user confusion about enrich-phase corrections by changing the data source from matched to enriched data and adding tooltips that show actual enrich-phase results. This will help users distinguish between truly problematic matches and expected enrich-phase adjustments.

## üß© Component Steps

1. **Backend API Enhancement** - Modify mismatch analyzer to use enriched data
2. **Data Structure Validation** - Verify existing enriched data works with mismatch analysis
3. **Frontend Data Source Update** - Update MismatchAnalyzer to handle enriched data
4. **Tooltip Component Creation** - Create reusable tooltip component for enrich previews
5. **UI Integration** - Add tooltips to MismatchAnalyzer table items
6. **Info Panel Enhancement** - Add explanatory info about match vs enrich phases
7. **Testing & Validation** - Ensure all functionality works with enriched data

## üîÅ Implementation Prompts

### Step 1: Backend API Enhancement

```text
Enhance the mismatch analyzer API to use enriched data instead of matched data.

**Context**: The MismatchAnalyzer currently uses data from the match phase, which can show apparent "mismatches" that are actually correct matches that get resolved during the enrich phase. We want to use enriched data to show users the final results.

**Requirements**:
1. Modify the mismatch analyzer API endpoint to read from `data/enriched/YYYY-MM.json` instead of `data/matched/YYYY-MM.json`
2. Ensure the API still provides all existing mismatch analysis functionality
3. Add validation to ensure enriched data contains all required fields for mismatch analysis
4. Update API documentation to reflect the data source change

**Test Requirements**:
- Test that the API returns the same structure as before
- Test that enriched data contains all required fields for mismatch analysis
- Test that the API handles missing enriched data gracefully
- Test that existing mismatch analysis logic works with enriched data

**Files to modify**:
- `sotd/match/tools/analyzers/mismatch_analyzer.py` (or similar)
- Any API endpoint files that call the mismatch analyzer
- Add tests for the enhanced API

**Success Criteria**:
- API successfully reads from enriched data
- All existing mismatch analysis functionality preserved
- Tests pass with enriched data
- Graceful handling of missing enriched data
```

**Status**: ‚úÖ COMPLETE

**Implementation Notes**:
- Added `load_enriched_data()` method to `AnalysisTool` base class
- Modified `MismatchAnalyzer.run()` to use enriched data when `--use-enriched-data` flag is set
- Added `--use-enriched-data` CLI argument to the parser
- Added comprehensive test `test_load_enriched_data()` to verify functionality
- All existing tests continue to pass
- CLI help shows the new argument correctly

### Step 2: Data Structure Validation

```text
Validate that existing enriched data contains all fields needed for mismatch analysis.

**Context**: We're switching from matched data to enriched data, but need to verify that the existing enriched data structure already contains all fields required for mismatch analysis.

**Requirements**:
1. Analyze the existing enriched data structure to verify it contains all fields needed for mismatch analysis
2. If any required fields are missing, document what's needed but don't modify enrich phase output
3. Ensure the mismatch analyzer can work with the existing enriched data structure
4. Add validation to handle any missing fields gracefully

**Test Requirements**:
- Test that existing enriched data contains all fields needed for mismatch analysis
- Test that missing fields are handled gracefully
- Test that mismatch analysis works with existing enriched data structure
- Test that no enrich phase output files are modified

**Files to modify**:
- Only mismatch analyzer files to handle existing enriched data
- No modifications to enrich phase output files

**Success Criteria**:
- Mismatch analyzer works with existing enriched data
- No changes to enrich phase output files
- All tests pass
- Graceful handling of any missing fields
```

### Step 3: Frontend Data Source Update

```text
Update the MismatchAnalyzer frontend component to handle enriched data structure.

**Context**: The frontend MismatchAnalyzer component needs to be updated to work with the new enriched data structure while maintaining all existing functionality.

**Requirements**:
1. Update the MismatchAnalyzer component to handle enriched data structure
2. Ensure all existing display modes and filtering still work
3. Update any data transformation logic to work with enriched data
4. Maintain backward compatibility with existing UI functionality

**Test Requirements**:
- Test that all existing display modes work with enriched data
- Test that filtering and sorting still work correctly
- Test that the component handles missing enriched data gracefully
- Test that existing UI interactions still work

**Files to modify**:
- `webui/src/pages/MismatchAnalyzer.tsx`
- `webui/src/components/data/MismatchAnalyzerDataTable.tsx`
- Update any data transformation utilities

**Success Criteria**:
- All existing UI functionality preserved
- Component works correctly with enriched data
- All tests pass
- No breaking changes to user experience
```

### Step 4: Tooltip Component Creation

```text
Create a reusable tooltip component for displaying enrich-phase previews and adjustments.

**Context**: We need to show users what the enrich phase actually produced vs what the match phase would have shown, to help them understand that apparent "mismatches" are actually working correctly.

**Requirements**:
1. Create a reusable `EnrichPreviewTooltip` component
2. Component should show enrich-phase adjustments (e.g., "Synthetic ‚Üí Badger")
3. Component should explain the conflict resolution (e.g., "User input prioritized over catalog data")
4. Component should be accessible and follow UI patterns
5. Component should be reusable across different data types (brush, razor, etc.)

**Test Requirements**:
- Test tooltip displays correctly for different conflict types
- Test tooltip accessibility (keyboard navigation, screen readers)
- Test tooltip positioning and styling
- Test tooltip with different data scenarios

**Files to create/modify**:
- `webui/src/components/ui/EnrichPreviewTooltip.tsx` (new)
- Add tests for the tooltip component
- Update component library documentation

**Success Criteria**:
- Tooltip component is reusable and accessible
- Tooltip displays enrich-phase adjustments clearly
- All tests pass
- Component follows established UI patterns
```

### Step 5: UI Integration

```text
Integrate the enrich preview tooltips into the MismatchAnalyzer data table.

**Context**: Now that we have the tooltip component and enriched data, we need to integrate the tooltips into the MismatchAnalyzer table to show users enrich-phase adjustments.

**Requirements**:
1. Add enrich preview tooltips to table items that have enrich-phase adjustments
2. Show tooltips on hover for items with fiber conflicts, size conflicts, etc.
3. Ensure tooltips don't interfere with existing table functionality
4. Add visual indicators (icons) to show which items have enrich adjustments

**Test Requirements**:
- Test tooltips appear correctly on hover
- Test tooltips show accurate enrich-phase information
- Test tooltips don't interfere with table interactions
- Test visual indicators are clear and helpful

**Files to modify**:
- `webui/src/components/data/MismatchAnalyzerDataTable.tsx`
- Update table row components to include tooltips
- Add visual indicators for enrich adjustments

**Success Criteria**:
- Tooltips appear correctly for items with enrich adjustments
- Tooltips show accurate and helpful information
- Visual indicators are clear and intuitive
- All existing table functionality preserved
```

### Step 6: Info Panel Enhancement

```text
Add explanatory information about match vs enrich phases to help users understand the pipeline.

**Context**: Users need to understand the difference between match phase and enrich phase to make sense of the tooltips and avoid confusion about apparent "mismatches."

**Requirements**:
1. Add an info panel or tooltip explaining match vs enrich phases
2. Explain that some apparent "mismatches" are actually correct enrich-phase adjustments
3. Provide guidance on what constitutes a "real" mismatch vs expected enrich corrections
4. Make the information discoverable but not overwhelming

**Test Requirements**:
- Test info panel is discoverable and helpful
- Test info panel doesn't clutter the UI
- Test info panel content is accurate and clear
- Test info panel accessibility

**Files to modify**:
- `webui/src/pages/MismatchAnalyzer.tsx`
- Add info panel component or enhance existing header

**Success Criteria**:
- Info panel helps users understand the pipeline
- Info panel is discoverable but not intrusive
- Content is clear and accurate
- Accessibility requirements met
```

### Step 7: Testing & Validation

```text
Comprehensive testing and validation of the enhanced MismatchAnalyzer with enriched data.

**Context**: We need to ensure that all changes work together correctly and that the enhanced MismatchAnalyzer provides a better user experience without breaking existing functionality.

**Requirements**:
1. End-to-end testing of the complete workflow
2. Test with various data scenarios (fiber conflicts, size conflicts, etc.)
3. Test with different product types (brush, razor, blade, soap)
4. Validate that user confusion is reduced
5. Performance testing with large datasets

**Test Requirements**:
- End-to-end tests for complete workflow
- Performance tests with large datasets
- User experience validation
- Regression testing of existing functionality
- Accessibility testing

**Files to create/modify**:
- Add comprehensive test suites
- Add performance benchmarks
- Update documentation

**Success Criteria**:
- All tests pass
- Performance is acceptable
- User experience is improved
- No regressions in existing functionality
- Accessibility requirements met
```

## üß† Critical Analysis

### **Plan Strengths:**
- **Incremental approach**: Each step builds logically on the previous one
- **Test-driven**: Each step includes comprehensive testing requirements
- **Risk mitigation**: Backend changes first, then frontend integration
- **User-focused**: Clear success criteria for user experience improvement
- **No output file changes**: Only changing data source, not modifying any pipeline output files

### **Plan Risks:**
- **API changes**: Changing data source could break existing functionality
- **UI complexity**: Adding tooltips could make the interface more complex
- **Data structure compatibility**: Need to ensure enriched data works with existing mismatch analysis logic

### **Mitigation Strategies:**
- **Backward compatibility**: Ensure all changes maintain existing functionality
- **Comprehensive testing**: Each step includes thorough testing requirements
- **Incremental validation**: Test each step before proceeding to the next
- **No output modifications**: Only reading from different existing files

### **Dependencies:**
- Step 1 must complete before Step 2
- Step 2 must complete before Step 3
- Steps 4-6 can be developed in parallel after Step 3
- Step 7 requires all previous steps to be complete

This plan provides a clear, incremental path to implementing the MismatchAnalyzer enhancement while maintaining code quality and minimizing risk, with no modifications to any pipeline output files.
description:
globs:
alwaysApply: false
---
