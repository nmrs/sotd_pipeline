# MismatchAnalyzer UI Enhancement Plan

## üìò Project Summary
Enhance the MismatchAnalyzer UI to reduce user confusion about enrich-phase corrections by changing the data source from matched to enriched data and adding tooltips that show actual enrich-phase results. This will help users distinguish between truly problematic matches and expected enrich-phase adjustments.

## üß© Component Steps

1. **Backend API Enhancement** - Modify mismatch analyzer to use enriched data
2. **Data Structure Validation** - Verify existing enriched data works with mismatch analysis
3. **Frontend Data Source Update** - Update MismatchAnalyzer to handle enriched data
4. **Tooltip Component Creation** - Create reusable tooltip component for enrich previews
5. **UI Integration** - Add tooltips to MismatchAnalyzer table items
6. **Info Panel Enhancement** - Add explanatory info about match vs enrich phases
7. **Testing & Validation** - Ensure all functionality works with enriched data

## üîÅ Implementation Prompts

### Step 1: Backend API Enhancement

```text
Enhance the mismatch analyzer API to use enriched data instead of matched data.

**Context**: The MismatchAnalyzer currently uses data from the match phase, which can show apparent "mismatches" that are actually correct matches that get resolved during the enrich phase. We want to use enriched data to show users the final results.

**Requirements**:
1. Modify the mismatch analyzer API endpoint to read from `data/enriched/YYYY-MM.json` instead of `data/matched/YYYY-MM.json`
2. Ensure the API still provides all existing mismatch analysis functionality
3. Add validation to ensure enriched data contains all required fields for mismatch analysis
4. Update API documentation to reflect the data source change

**Test Requirements**:
- Test that the API returns the same structure as before
- Test that enriched data contains all required fields for mismatch analysis
- Test that the API handles missing enriched data gracefully
- Test that existing mismatch analysis logic works with enriched data

**Files to modify**:
- `sotd/match/tools/analyzers/mismatch_analyzer.py` (or similar)
- Any API endpoint files that call the mismatch analyzer
- Add tests for the enhanced API

**Success Criteria**:
- API successfully reads from enriched data
- All existing mismatch analysis functionality preserved
- Tests pass with enriched data
- Graceful handling of missing enriched data
```

**Status**: ‚úÖ COMPLETE

**Implementation Notes**:
- Added `load_enriched_data()` method to `AnalysisTool` base class
- Modified `MismatchAnalyzer.run()` to use enriched data when `--use-enriched-data` flag is set
- Added `--use-enriched-data` CLI argument to the parser
- Added comprehensive test `test_load_enriched_data()` to verify functionality
- All existing tests continue to pass
- CLI help shows the new argument correctly

### Step 2: Data Structure Validation

```text
Verify that enriched data contains all required fields for mismatch analysis.

**Context**: Before using enriched data in the mismatch analyzer, we need to ensure that the enriched data structure is compatible with the existing mismatch analysis logic.

**Requirements**:
1. Verify that enriched data contains all fields required by mismatch analysis
2. Test that enriched data structure is compatible with existing mismatch analysis logic
3. Ensure that enrich-phase fields don't interfere with mismatch detection
4. Validate that the mismatch analyzer can process enriched data without errors

**Test Requirements**:
- Test that enriched data structure is compatible with mismatch analysis
- Test that enrich-phase fields are preserved and don't cause errors
- Test with real enriched data files to ensure compatibility
- Test that all mismatch analysis features work with enriched data

**Files to modify**:
- Add tests to verify enriched data compatibility
- Test with real enriched data files

**Success Criteria**:
- Enriched data structure is compatible with mismatch analysis
- All mismatch analysis features work with enriched data
- Tests pass with both synthetic and real enriched data
- No errors when processing enriched data
```

**Status**: ‚úÖ COMPLETE

**Implementation Notes**:
- Added `test_enriched_data_structure_compatibility()` test to verify enriched data structure compatibility
- Tested with real enriched data using CLI: `--use-enriched-data` flag works correctly
- Verified that enriched data contains all required fields for mismatch analysis
- Confirmed that enrich-phase fields (like `_enriched_by`, `_extraction_source`) don't interfere with analysis
- Enriched data structure is fully compatible with existing mismatch analysis logic

### Step 3: Frontend Data Source Update

```text
Update the MismatchAnalyzer UI to use enriched data instead of matched data.

**Context**: The frontend MismatchAnalyzer component currently uses matched data. We need to update it to use enriched data to show users the final enrich-phase results.

**Requirements**:
1. Update the MismatchAnalyzer component to include a toggle for enriched data
2. Modify the API call to include the enriched data flag
3. Update the UI to show when enriched data is being used
4. Ensure the toggle is clearly labeled and easy to understand
5. Test that the UI works correctly with both matched and enriched data

**Test Requirements**:
- Test that the enriched data toggle works correctly
- Test that the API call includes the correct flag
- Test that the UI shows appropriate feedback when using enriched data
- Test that existing functionality continues to work with matched data
- Test that the toggle state is preserved during analysis

**Files to modify**:
- `webui/src/pages/MismatchAnalyzer.tsx` - Add enriched data toggle
- `webui/src/services/api.ts` - Update API interface
- Add tests for the new functionality

**Success Criteria**:
- UI includes a clear toggle for enriched data
- API calls include the enriched data flag when enabled
- UI provides clear feedback about which data source is being used
- All existing functionality continues to work
- Tests pass for both matched and enriched data modes
```

**Status**: ‚úÖ COMPLETE

**Implementation Notes**:
- Added `useEnrichedData` state variable to MismatchAnalyzer component
- Added checkbox UI control for "Use Enriched Data" toggle
- Updated `MismatchAnalysisRequest` interface to include `use_enriched_data` flag
- Modified `handleAnalyze` function to pass the enriched data flag to API
- Updated backend API endpoint to handle the enriched data flag
- Added `use_enriched_data` field to `MismatchAnalysisRequest` model
- Modified API endpoint to use `load_enriched_data()` when flag is set
- All existing tests continue to pass
- Backend CLI and frontend UI both support enriched data toggle

### Step 4: Tooltip Component Creation

```text
Create reusable tooltip component for showing enrich-phase adjustments.

**Context**: We need to create a tooltip component that can show users the differences between matched data and enriched data, helping them understand what enrich-phase adjustments were made.

**Requirements**:
1. Create a reusable tooltip component that can be used throughout the UI
2. Create a specialized tooltip component for enrich-phase adjustments
3. The tooltip should show before/after comparisons of relevant fields
4. Include information about the extraction source when available
5. Make the tooltip responsive and accessible
6. Add comprehensive tests for the tooltip functionality

**Test Requirements**:
- Test that tooltip shows on hover and hides on mouse leave
- Test that tooltip displays correct comparison information
- Test that tooltip handles missing or identical data gracefully
- Test that tooltip is responsive and accessible
- Test that specialized enrich-phase tooltip shows relevant field comparisons

**Files to create**:
- `webui/src/components/ui/tooltip.tsx` - Base tooltip component
- `webui/src/components/ui/EnrichPhaseTooltip.tsx` - Specialized enrich-phase tooltip
- `webui/src/components/ui/__tests__/EnrichPhaseTooltip.test.tsx` - Tests for tooltip

**Success Criteria**:
- Tooltip component is reusable and well-tested
- Enrich-phase tooltip shows relevant field comparisons
- Tooltip is responsive and accessible
- All tests pass
- Tooltip handles edge cases gracefully
```

**Status**: ‚úÖ COMPLETE

**Implementation Notes**:
- Created base `Tooltip` component with hover functionality
- Created specialized `EnrichPhaseTooltip` component for enrich-phase adjustments
- Tooltip shows before/after comparisons for relevant fields (fiber, knot_size_mm, handle_maker)
- Includes extraction source information when available
- Added comprehensive tests covering hover behavior, content display, and edge cases
- All tests pass successfully
- Tooltip is responsive with proper positioning and styling

### Step 5: UI Integration

```text
Integrate the enrich preview tooltips into the MismatchAnalyzer data table.

**Context**: Now that we have the tooltip component and enriched data, we need to integrate the tooltips into the MismatchAnalyzer table to show users enrich-phase adjustments.

**Requirements**:
1. Add enrich preview tooltips to table items that have enrich-phase adjustments
2. Show tooltips on hover for items with fiber conflicts, size conflicts, etc.
3. Ensure tooltips don't interfere with existing table functionality
4. Add visual indicators (icons) to show which items have enrich adjustments

**Test Requirements**:
- Test tooltips appear correctly on hover
- Test tooltips show accurate enrich-phase information
- Test tooltips don't interfere with table interactions
- Test visual indicators are clear and helpful

**Files to modify**:
- `webui/src/components/data/MismatchAnalyzerDataTable.tsx`
- Update table row components to include tooltips
- Add visual indicators for enrich adjustments

**Success Criteria**:
- Tooltips appear correctly for items with enrich adjustments
- Tooltips show accurate and helpful information
- Visual indicators are clear and intuitive
- All existing table functionality preserved
```

### Step 6: Info Panel Enhancement

```text
Add explanatory information about match vs enrich phases to help users understand the pipeline.

**Context**: Users need to understand the difference between match phase and enrich phase to make sense of the tooltips and avoid confusion about apparent "mismatches."

**Requirements**:
1. Add an info panel or tooltip explaining match vs enrich phases
2. Explain that some apparent "mismatches" are actually correct enrich-phase adjustments
3. Provide guidance on what constitutes a "real" mismatch vs expected enrich corrections
4. Make the information discoverable but not overwhelming

**Test Requirements**:
- Test info panel is discoverable and helpful
- Test info panel doesn't clutter the UI
- Test info panel content is accurate and clear
- Test info panel accessibility

**Files to modify**:
- `webui/src/pages/MismatchAnalyzer.tsx`
- Add info panel component or enhance existing header

**Success Criteria**:
- Info panel helps users understand the pipeline
- Info panel is discoverable but not intrusive
- Content is clear and accurate
- Accessibility requirements met
```

### Step 7: Testing & Validation

```text
Comprehensive testing and validation of the enhanced MismatchAnalyzer with enriched data.

**Context**: We need to ensure that all changes work together correctly and that the enhanced MismatchAnalyzer provides a better user experience without breaking existing functionality.

**Requirements**:
1. End-to-end testing of the complete workflow
2. Test with various data scenarios (fiber conflicts, size conflicts, etc.)
3. Test with different product types (brush, razor, blade, soap)
4. Validate that user confusion is reduced
5. Performance testing with large datasets

**Test Requirements**:
- End-to-end tests for complete workflow
- Performance tests with large datasets
- User experience validation
- Regression testing of existing functionality
- Accessibility testing

**Files to create/modify**:
- Add comprehensive test suites
- Add performance benchmarks
- Update documentation

**Success Criteria**:
- All tests pass
- Performance is acceptable
- User experience is improved
- No regressions in existing functionality
- Accessibility requirements met
```

## üß† Critical Analysis

### **Plan Strengths:**
- **Incremental approach**: Each step builds logically on the previous one
- **Test-driven**: Each step includes comprehensive testing requirements
- **Risk mitigation**: Backend changes first, then frontend integration
- **User-focused**: Clear success criteria for user experience improvement
- **No output file changes**: Only changing data source, not modifying any pipeline output files

### **Plan Risks:**
- **API changes**: Changing data source could break existing functionality
- **UI complexity**: Adding tooltips could make the interface more complex
- **Data structure compatibility**: Need to ensure enriched data works with existing mismatch analysis logic

### **Mitigation Strategies:**
- **Backward compatibility**: Ensure all changes maintain existing functionality
- **Comprehensive testing**: Each step includes thorough testing requirements
- **Incremental validation**: Test each step before proceeding to the next
- **No output modifications**: Only reading from different existing files

### **Dependencies:**
- Step 1 must complete before Step 2
- Step 2 must complete before Step 3
- Steps 4-6 can be developed in parallel after Step 3
- Step 7 requires all previous steps to be complete

This plan provides a clear, incremental path to implementing the MismatchAnalyzer enhancement while maintaining code quality and minimizing risk, with no modifications to any pipeline output files.
description:
globs:
alwaysApply: false
---
