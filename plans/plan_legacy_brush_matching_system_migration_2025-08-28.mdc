# Legacy Brush Matching System Migration Plan

## Overview
This plan outlines the systematic migration from the legacy brush matching system to the new scoring-based system. The legacy system uses a "first match wins" approach, while the new system uses multi-strategy scoring with configurable weights and modifiers.

## Critical Success Criteria

### **MANDATORY**: Test Suite Must Be 100% Passing
- **ALL tests must pass before proceeding to any next step or phase**
- **Test failures indicate incomplete migration or architectural incompatibilities**
- **Running tests during migration helps catch issues early and prevents accumulation of problems**
- **Test failures are NOT just "config changes" - they reveal fundamental migration issues**

### **MANDATORY**: Quality Gates Between Phases
- **Phase completion requires:**
  1. All tests passing (100%)
  2. No linter errors
  3. No type check errors
  4. All quality checks passing (`make format lint typecheck test`)
- **No exceptions - failing tests block progression**

## Migration Strategy

The migration follows a systematic approach to ensure the new system is fully independent before removing legacy components:

1. **Phase 1: Extract Shared Functionality** - Move common logic to shared utilities
2. **Phase 2: Update Dependencies** - Refactor components to use new utilities
3. **Phase 3: Remove Legacy System** - Delete legacy classes and tools
4. **Phase 4: Test Migration and Validation** - Update all test dependencies
5. **Phase 5: Remove Legacy System** - Final cleanup and verification
6. **Phase 6: Cleanup and Verification** - Documentation and final checks
7. **Phase 7: Rename Main Matcher** - Final naming cleanup

## Technical Approach

### Phase 1: Extract Shared Functionality (COMPLETE)
- ✅ **Step 1**: Extract catalog loading logic to `CatalogLoader` utility
- ✅ **Step 2**: Extract strategy management logic to `StrategyManager` utility  
- ✅ **Step 3**: Extract configuration logic to `ConfigManager` utility
- ✅ **Step 4**: Create shared strategy base classes and compatibility layer

### Phase 2: Update Dependencies (COMPLETE)
- ✅ **Step 5**: Update `BrushScoringMatcher` dependencies and imports
- ✅ **Step 6**: Update wrapper strategies to remove legacy dependencies
- ✅ **Step 7**: Update strategy dependencies and automated split logic

### Phase 3: Remove Legacy System (IN PROGRESS)
- ✅ **Step 8**: Remove legacy classes (`BrushMatcher`, `BrushMatcherConfig`)
- **Step 9**: Remove legacy tools and directories
- **Step 10**: Remove legacy CLI options

### Phase 4: Test Migration and Validation
- **Step 14**: Update test imports and dependencies
- **Step 15**: Update integration tests
- **Step 16**: Update strategy tests

### Phase 5: Remove Legacy System
- **Step 17**: Remove legacy classes
- **Step 18**: Remove legacy tools and directories
- **Step 19**: Remove legacy CLI options

### Phase 6: Cleanup and Verification
- **Step 20**: Update remaining tests
- **Step 21**: Update documentation
- **Step 22**: Final verification
- **Step 24**: Analyze and remove orphaned strategies

### Phase 7: Rename Main Matcher
- **Step 23**: Rename `scoring_brush_matcher.py` to `brush_matcher.py`

## Current Status

**Overall Progress**: 8/24 steps (33.33%) - **Phase 3, Step 8 Complete**

### **MANDATORY**: Test Suite Status
- **Current Status**: ✅ **158/158 tests passing (100%)**
- **Quality Gate**: ✅ **PASSED** - Ready to proceed to Phase 3, Step 9
- **Next Action**: Proceed with Phase 3, Step 9 (Remove Legacy Tools and Directories)

## Implementation Details

### Phase 1: Extract Shared Functionality

#### Step 1: Extract Catalog Loading Logic ✅ COMPLETE
**Status**: COMPLETE  
**Description**: Move catalog loading from `BrushMatcher` to `CatalogLoader` utility  
**Files Modified**: `sotd/match/scoring_brush_matcher.py`  
**Dependencies**: `sotd/match/loaders.py` (existing utility)  
**Testing**: ✅ All tests passing

#### Step 2: Extract Strategy Management Logic ✅ COMPLETE
**Status**: COMPLETE  
**Description**: Create `StrategyManager` utility for centralized strategy creation  
**Files Created**: `sotd/match/utils/strategy_manager.py`  
**Files Modified**: `sotd/match/scoring_brush_matcher.py`  
**Testing**: ✅ All tests passing

#### Step 3: Extract Configuration Logic ✅ COMPLETE
**Status**: COMPLETE  
**Description**: Create `ConfigManager` utility for centralized configuration management  
**Files Created**: `sotd/match/utils/config_manager.py`  
**Files Modified**: `sotd/match/scoring_brush_matcher.py`  
**Testing**: ✅ All tests passing

#### Step 4: Create Shared Strategy Base Classes ✅ COMPLETE
**Status**: COMPLETE  
**Description**: Add compatibility layer methods to `BrushScoringMatcher` for wrapper strategies  
**Files Modified**: `sotd/match/scoring_brush_matcher.py`  
**Testing**: ✅ All tests passing

### Phase 2: Update Dependencies

#### Step 5: Update BrushScoringMatcher Dependencies ✅ COMPLETE
**Status**: COMPLETE  
**Description**: Consolidate imports, use ConfigManager for paths, update dependency names  
**Files Modified**: `sotd/match/scoring_brush_matcher.py`  
**Testing**: ✅ All tests passing

#### Step 6: Update Wrapper Strategies ✅ COMPLETE
**Status**: COMPLETE  
**Description**: Refactor wrapper strategies to remove legacy dependencies and implement logic directly  
**Files Modified**: 
- `sotd/match/brush_matching_strategies/known_split_wrapper_strategy.py`
- `sotd/match/brush_matching_strategies/correct_matches_wrapper_strategies.py`
- `sotd/match/brush_matching_strategies/complete_brush_wrapper_strategy.py`
- `sotd/match/brush_matching_strategies/full_input_component_matching_strategy.py`
**Testing**: ✅ All tests passing

#### Step 7: Update Strategy Dependencies ✅ COMPLETE
**Status**: COMPLETE  
**Description**: Refactor `AutomatedSplitStrategy` to remove legacy dependencies and implement split logic directly  
**Files Modified**: 
- `sotd/match/brush_matching_strategies/automated_split_strategy.py`
- `tests/match/brush_scoring_components/test_full_input_component_matching_strategy.py`
- `tests/match/test_automated_split_strategy.py`
**Testing**: ✅ All tests passing

### Phase 3: Remove Legacy System (IN PROGRESS)

#### Step 8: Remove Legacy Classes
**Status**: COMPLETE  
**Description**: Remove `BrushMatcher` and `BrushMatcherConfig` classes  
**Files to Delete**: 
- `sotd/match/brush_matcher.py`
- `sotd/match/brush_matcher_config.py`
**Dependencies**: Ensure no remaining imports or references  
**Testing**: Must verify 100% test pass rate before proceeding

#### Step 9: Remove Legacy Tools and Directories
**Status**: TODO  
**Description**: Remove legacy brush matching tools and directories  
**Directories to Remove**: 
- `sotd/match/brush_matching_strategies/legacy/`
- Any other legacy-specific directories
**Testing**: Must verify 100% test pass rate before proceeding

#### Step 10: Remove Legacy CLI Options
**Status**: TODO  
**Description**: Remove legacy CLI options and commands  
**Files to Modify**: 
- `sotd/match/cli.py`
- Any other CLI-related files
**Testing**: Must verify 100% test pass rate before proceeding

### Phase 4: Test Migration and Validation

#### Step 14: Update Test Imports and Dependencies
**Status**: TODO  
**Description**: Update all test files to remove legacy imports and dependencies  
**Files to Modify**: All test files in `tests/match/`  
**Testing**: Must verify 100% test pass rate before proceeding

#### Step 15: Update Integration Tests
**Status**: TODO  
**Description**: Update integration tests to work with new system  
**Files to Modify**: `tests/integration/`  
**Testing**: Must verify 100% test pass rate before proceeding

#### Step 16: Update Strategy Tests
**Status**: TODO  
**Description**: Update strategy-specific tests to work with new system  
**Files to Modify**: `tests/match/brush_matching_strategies/`  
**Testing**: Must verify 100% test pass rate before proceeding

### Phase 5: Remove Legacy System

#### Step 17: Remove Legacy Classes
**Status**: TODO  
**Description**: Final removal of any remaining legacy classes  
**Testing**: Must verify 100% test pass rate before proceeding

#### Step 18: Remove Legacy Tools and Directories
**Status**: TODO  
**Description**: Final cleanup of legacy tools and directories  
**Testing**: Must verify 100% test pass rate before proceeding

#### Step 19: Remove Legacy CLI Options
**Status**: TODO  
**Description**: Final cleanup of legacy CLI options  
**Testing**: Must verify 100% test pass rate before proceeding

### Phase 6: Cleanup and Verification

#### Step 20: Update Remaining Tests
**Status**: TODO  
**Description**: Update any remaining tests that need attention  
**Testing**: Must verify 100% test pass rate before proceeding

#### Step 21: Update Documentation
**Status**: TODO  
**Description**: Update all documentation to reflect new system  
**Files to Modify**: 
- `docs/`
- `README.md`
- Any other documentation files
**Testing**: Must verify 100% test pass rate before proceeding

#### Step 22: Final Verification
**Status**: TODO  
**Description**: Final verification that migration is complete  
**Testing**: Must verify 100% test pass rate before proceeding

#### Step 24: Analyze and Remove Orphaned Strategies
**Status**: TODO  
**Description**: Remove strategies that are no longer used by the new system  
**Files to Remove**: 
- `sotd/match/brush_matching_strategies/legacy_brush_matcher_strategy.py`
- `sotd/match/brush_matching_strategies/legacy_brush_matcher_wrapper_strategy.py`
- `sotd/match/brush_matching_strategies/legacy_brush_matcher_fallback_strategy.py`
- `sotd/match/brush_matching_strategies/legacy_brush_matcher_optimization_strategy.py`
- `sotd/match/brush_matching_strategies/legacy_brush_matcher_performance_strategy.py`
- `sotd/match/brush_matching_strategies/legacy_brush_matcher_validation_strategy.py`
**Testing**: Must verify 100% test pass rate before proceeding

### Phase 7: Rename Main Matcher

#### Step 23: Rename Main Matcher
**Status**: TODO  
**Description**: Rename `scoring_brush_matcher.py` to `brush_matcher.py` since it will be the only brush matcher  
**Files to Rename**: 
- `sotd/match/scoring_brush_matcher.py` → `sotd/match/brush_matcher.py`
**Testing**: Must verify 100% test pass rate before proceeding

## Quality Assurance

### **MANDATORY**: Pre-Phase Validation
Before starting any new phase:
1. **Run full test suite**: `python -m pytest tests/match/brush_scoring_components/`
2. **Verify 100% pass rate**: All tests must pass
3. **Run quality checks**: `make format lint typecheck test`
4. **Document any issues**: Update plan with lessons learned

### **MANDATORY**: Post-Phase Validation
After completing any phase:
1. **Run full test suite**: Ensure no regressions
2. **Run quality checks**: Ensure code quality standards
3. **Update plan**: Mark steps as complete
4. **Commit changes**: Use descriptive commit messages

## Lessons Learned

### Test Failures Reveal Migration Issues
The test failures we encountered were NOT simple config changes:
- **Strategy name mismatches** indicated incomplete migration
- **Data structure incompatibilities** showed architectural gaps
- **Production data dependencies** revealed poor test isolation

### Test Isolation is Critical
- **Never use production config files in tests**
- **Create temporary test configs with known values**
- **Use mocks for external dependencies**
- **Tests should be deterministic and repeatable**

### Migration Requires Incremental Testing
- **Run tests after each step to catch issues early**
- **Don't accumulate problems across multiple steps**
- **Fix issues immediately before proceeding**

## Next Steps

**Current Status**: ✅ **Phase 2 Complete - Ready for Phase 3**

**Next Action**: Begin Phase 3, Step 8 (Remove Legacy Classes)

**Prerequisites Met**: 
- ✅ All tests passing (158/158)
- ✅ Quality checks passing
- ✅ No linter errors
- ✅ No type check errors

**Ready to Proceed**: YES
