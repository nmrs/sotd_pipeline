# Legacy Brush Matching System Migration Plan

## Overview
This plan outlines the systematic migration from the legacy brush matching system to the new scoring-based system. The legacy system uses a "first match wins" approach, while the new system uses multi-strategy scoring with configurable weights and modifiers.

## Critical Success Criteria

### **MANDATORY**: Test Suite Must Be 100% Passing
- **ALL tests must pass before proceeding to any next step or phase**
- **Test failures indicate incomplete migration or architectural incompatibilities**
- **Running tests during migration helps catch issues early and prevents accumulation of problems**
- **Test failures are NOT just "config changes" - they reveal fundamental migration issues**

### **MANDATORY**: Quality Gates Between Phases
- **Phase completion requires:**
  1. All tests passing (100%)
  2. No linter errors
  3. No type check errors
  4. All quality checks passing (`make format lint typecheck test`)
- **No exceptions - failing tests block progression**

## Progress Summary

### âœ… **COMPLETED PHASES**

#### Phase 1: Extract Shared Functionality âœ…
- **Step 1**: Extract catalog loading logic to `CatalogLoader` âœ…
- **Step 2**: Extract strategy management logic to `StrategyManager` âœ…  
- **Step 3**: Extract configuration management logic to `ConfigManager` âœ…
- **Step 4**: Extract correct matches loading logic âœ…

#### Phase 2: Update New Scoring System âœ…
- **Step 5**: Update `BrushScoringMatcher` to use extracted components âœ…
- **Step 6**: Update wrapper strategies to remove legacy dependencies âœ…
- **Step 7**: Update `AutomatedSplitStrategy` to implement logic directly âœ…

#### Phase 3: Remove Legacy Components âœ…
- **Step 8**: Remove legacy classes (`BrushMatcher`, `BrushMatcherConfig`) âœ…
- **Step 9**: Remove legacy tools and directories âœ…

#### Phase 4: Test Migration and Validation âœ…
- **Step 10**: Restore critical test files to prevent massive coverage loss âœ…
- **Step 11**: Audit and triage all deleted test files âœ…

### ðŸ”„ **CURRENT PHASE**

#### Phase 5: Test Validation and Updates (IN PROGRESS)
- **Step 12**: Verify restored tests can run without import errors âœ…
- **Step 13**: Update tests to work with current system interfaces
- **Step 14**: Run test suite to ensure no regressions

### ðŸ“‹ **REMAINING TASKS**

#### Phase 6: Final Cleanup and Validation
- **Step 15**: Analyze and remove orphaned strategies (6 identified)
- **Step 16**: Rename `scoring_brush_matcher.py` to `brush_matcher.py`
- **Step 17**: Final validation and documentation

## Next Action

**IMMEDIATE PRIORITY**: **Step 13 - Update tests to work with current system interfaces**

The critical test file restoration work has been completed successfully:
- âœ… **32 critical test files restored** (preventing massive test coverage loss)
- âœ… **10 legacy tests remain deleted** (all safe to delete)
- âœ… **All restored files can be imported** without errors

**Next Step**: Update the restored tests to work with current system interfaces and ensure they can run successfully. This involves:
1. Fixing any interface changes (class names, method signatures)
2. Removing any remaining legacy dependencies
3. Updating test data structures to match current system
4. Running tests to identify and fix any remaining issues

## Critical Success Metrics

### âœ… **ACHIEVED**
- **Test Coverage Preservation**: Prevented loss of 32 critical test files
- **Legacy System Removal**: Successfully removed all legacy brush matching components
- **New System Independence**: `BrushScoringMatcher` now works without legacy dependencies
- **Import Validation**: All restored test files can be imported without errors

### ðŸŽ¯ **TARGETS**
- **100% Test Pass Rate**: All restored tests must pass after updates
- **No Linter Errors**: Clean code quality across all restored tests
- **No Type Check Errors**: Proper type safety maintained
- **Full Test Coverage**: All critical functionality remains tested
