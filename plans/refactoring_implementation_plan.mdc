---
description: 
globs: 
alwaysApply: false
---
# SOTD Pipeline Refactoring Implementation Plan

## Overview
This plan implements a systematic refactoring of the SOTD Pipeline codebase to eliminate code redundancy and improve maintainability. The refactoring follows the Task Driven TDD Loop approach with incremental, test-driven changes.

## Goals
- Eliminate ~800-1000 lines of duplicated code
- Improve maintainability through unified patterns
- Enhance consistency across modules
- Preserve all existing functionality
- Maintain comprehensive test coverage

## Phase 1: High Impact, Low Risk Refactoring

### Chunk 1.1: Unify Performance Monitoring
**Priority**: HIGH | **Risk**: LOW | **Estimated Lines**: ~200 eliminated

#### Task 1.1.1: Create Base Performance Monitor
- [ ] Create `sotd/utils/performance_base.py` with abstract base classes
- [ ] Extract common `TimingStats` and `PerformanceMetrics` classes
- [ ] Create `BasePerformanceMonitor` with common functionality
- [ ] Add comprehensive unit tests for base classes
- [ ] Run quality checks and commit

#### Task 1.1.2: Refactor Match Performance Monitor
- [ ] Update `sotd/match/utils/performance.py` to inherit from base
- [ ] Remove duplicated code, keep only match-specific logic
- [ ] Update all imports in match module
- [ ] Add integration tests for match performance monitoring
- [ ] Run quality checks and commit

#### Task 1.1.3: Update Other Performance Monitors
- [ ] Update `sotd/utils/performance.py` to use new base classes
- [ ] Remove duplicated code, keep only general functionality
- [ ] Update all imports across codebase
- [ ] Add integration tests for general performance monitoring
- [ ] Run quality checks and commit

#### Task 1.1.4: Cleanup and Documentation
- [ ] Remove `sotd/match/utils/performance.py` (functionality moved to base)
- [ ] Update documentation for performance monitoring
- [ ] Add examples of using unified performance monitoring
- [ ] Run quality checks and commit

### Chunk 1.2: Standardize CLI Argument Patterns
**Priority**: HIGH | **Risk**: LOW | **Estimated Lines**: ~300 eliminated

#### Task 1.2.1: Create Base CLI Parser
- [x] Create `sotd/cli_utils/date_span.py` with common date parsing logic
- [x] Create `sotd/cli_utils/base_parser.py` with `BaseCLIParser` class
- [x] Implement common argument patterns (month, year, range, debug, force)
- [x] Add validation logic for date arguments
- [x] Create comprehensive unit tests for base parser
- [x] Run quality checks and commit

#### Task 1.2.2: Refactor Aggregate CLI
- [x] Update `sotd/aggregate/run.py` to use proper CLI structure with `get_parser()`
- [x] Create `sotd/aggregate/cli.py` with standardized argument patterns
- [x] Remove duplicated argument parsing code
- [x] Keep only aggregate-specific arguments
- [x] Use `month_span` utility for consistent date range processing
- [x] Separate `run()` and `main()` functions for better testability
- [x] Add integration tests for aggregate CLI
- [x] Run quality checks and commit

#### Task 1.2.3: Refactor Match CLI
- [x] Update `sotd/match/run.py` to use `BaseCLIParser`
- [x] Remove duplicated argument parsing code
- [x] Keep only match-specific arguments (mode, parallel, max-workers)
- [x] Add integration tests for match CLI
- [x] Run quality checks and commit

#### Task 1.2.4: Refactor Extract CLI
- [x] Update `sotd/extract/run.py` to use `BaseCLIParser`
- [x] Remove duplicated argument parsing code
- [x] Add integration tests for extract CLI
- [x] Run quality checks and commit

#### Task 1.2.5: Refactor Enrich CLI
- [x] Update `sotd/enrich/run.py` to use `BaseCLIParser`
- [x] Remove duplicated argument parsing code
- [x] Add integration tests for enrich CLI
- [x] Run quality checks and commit

#### Task 1.2.6: Refactor Fetch CLI
- [x] Update `sotd/fetch/run.py` to use `BaseCLIParser`
- [x] Remove duplicated argument parsing code
- [x] Keep only fetch-specific arguments (audit, list-months)
- [x] Add integration tests for fetch CLI
- [x] Run quality checks and commit

#### Task 1.2.7: Refactor Report CLI
- [x] Update `sotd/report/run.py` to use `BaseCLIParser`
- [x] Remove duplicated argument parsing code
- [x] Keep only report-specific arguments (type, data-root)
- [x] Add integration tests for report CLI
- [x] Run quality checks and commit

#### Task 1.2.8: Refactor Analysis Tools
- [ ] Update all analysis tools in `sotd/match/tools/` to use `BaseCLIParser`
- [ ] Update `sotd/extract/analyze_cli.py` to use `BaseCLIParser`
- [ ] Remove duplicated argument parsing code
- [ ] Add integration tests for analysis tools
- [ ] Run quality checks and commit

#### Task 1.2.9: Enhance Main Pipeline CLI (COMPLETED)
- [x] Enhanced `run.py` with improved phase range parsing via `get_phase_range()`
- [x] Added flexible phase range support (single phase, ranges, from/to)
- [x] Improved error handling and validation for phase ranges
- [x] Updated help text with comprehensive examples
- [x] Standardized argument naming to use --start/--end consistently across all CLIs

### Chunk 1.3: Consolidate File I/O Operations
**Priority**: HIGH | **Risk**: LOW | **Estimated Lines**: ~150 eliminated

#### Task 1.3.1: Create Unified File I/O Utilities
- [ ] Create `sotd/utils/file_io.py` with unified file operations
- [ ] Implement `save_json_data()` with atomic writes
- [ ] Implement `load_json_data()` with error handling
- [ ] Implement `save_yaml_data()` and `load_yaml_data()`
- [ ] Add comprehensive unit tests for file I/O utilities
- [ ] Run quality checks and commit

#### Task 1.3.2: Refactor Fetch Save/Load
- [ ] Update `sotd/fetch/save.py` to use unified utilities
- [ ] Remove duplicated file I/O code
- [ ] Update all imports in fetch module
- [ ] Add integration tests for fetch file operations
- [ ] Run quality checks and commit

#### Task 1.3.3: Refactor Extract Save
- [ ] Update `sotd/extract/save.py` to use unified utilities
- [ ] Remove duplicated file I/O code
- [ ] Add integration tests for extract file operations
- [ ] Run quality checks and commit

#### Task 1.3.4: Refactor Enrich Save/Load
- [ ] Update `sotd/enrich/save.py` to use unified utilities
- [ ] Remove duplicated file I/O code
- [ ] Add integration tests for enrich file operations
- [ ] Run quality checks and commit

#### Task 1.3.5: Refactor Aggregate Save/Load
- [ ] Update `sotd/aggregate/save.py` to use unified utilities
- [ ] Update `sotd/aggregate/load.py` to use unified utilities
- [ ] Remove duplicated file I/O code
- [ ] Add integration tests for aggregate file operations
- [ ] Run quality checks and commit

#### Task 1.3.6: Refactor Report Load
- [ ] Update `sotd/report/load.py` to use unified utilities
- [ ] Remove duplicated file I/O code
- [ ] Add integration tests for report file operations
- [ ] Run quality checks and commit

## Phase 2: Medium Impact, Medium Risk Refactoring

### Chunk 2.1: Refactor Core Aggregators
**Priority**: MEDIUM | **Risk**: MEDIUM | **Estimated Lines**: ~200 eliminated

#### Task 2.1.1: Create Base Aggregator
- [ ] Create `sotd/aggregate/aggregators/base_aggregator.py`
- [ ] Implement `BaseAggregator` with common aggregation logic
- [ ] Add configuration system for field extraction
- [ ] Create comprehensive unit tests for base aggregator
- [ ] Run quality checks and commit

#### Task 2.1.2: Refactor Razor Aggregator
- [ ] Update `sotd/aggregate/aggregators/core/razor_aggregator.py` to inherit from base
- [ ] Remove duplicated aggregation logic
- [ ] Keep only razor-specific field extraction
- [ ] Add integration tests for razor aggregation
- [ ] Run quality checks and commit

#### Task 2.1.3: Refactor Soap Aggregator
- [ ] Update `sotd/aggregate/aggregators/core/soap_aggregator.py` to inherit from base
- [ ] Remove duplicated aggregation logic
- [ ] Keep only soap-specific field extraction
- [ ] Add integration tests for soap aggregation
- [ ] Run quality checks and commit

#### Task 2.1.4: Refactor Blade Aggregator
- [ ] Update `sotd/aggregate/aggregators/core/blade_aggregator.py` to inherit from base
- [ ] Remove duplicated aggregation logic
- [ ] Keep only blade-specific field extraction
- [ ] Add integration tests for blade aggregation
- [ ] Run quality checks and commit

#### Task 2.1.5: Refactor Brush Aggregator
- [ ] Update `sotd/aggregate/aggregators/core/brush_aggregator.py` to inherit from base
- [ ] Remove duplicated aggregation logic
- [ ] Keep only brush-specific field extraction
- [ ] Add integration tests for brush aggregation
- [ ] Run quality checks and commit

### Chunk 2.2: Enhance Table Generators
**Priority**: MEDIUM | **Risk**: LOW | **Estimated Lines**: ~100 eliminated

#### Task 2.2.1: Enhance Base Table Generator
- [ ] Update `sotd/report/table_generators/base.py` with factory methods
- [ ] Add common table type configurations
- [ ] Create utility methods for common column patterns
- [ ] Add comprehensive unit tests for enhanced base
- [ ] Run quality checks and commit

#### Task 2.2.2: Refactor Soap Tables
- [ ] Update `sotd/report/table_generators/soap_tables.py` to use enhanced base
- [ ] Remove duplicated column configurations
- [ ] Use factory methods for common table types
- [ ] Add integration tests for soap tables
- [ ] Run quality checks and commit

#### Task 2.2.3: Refactor Razor Tables
- [ ] Update `sotd/report/table_generators/razor_tables.py` to use enhanced base
- [ ] Remove duplicated column configurations
- [ ] Use factory methods for common table types
- [ ] Add integration tests for razor tables
- [ ] Run quality checks and commit

#### Task 2.2.4: Refactor Other Table Generators
- [ ] Update remaining table generators to use enhanced base
- [ ] Remove duplicated column configurations
- [ ] Use factory methods for common table types
- [ ] Add integration tests for all table generators
- [ ] Run quality checks and commit

## Phase 3: Low Impact, Low Risk Refactoring

### Chunk 3.1: Extract Common Patterns
**Priority**: LOW | **Risk**: LOW | **Estimated Lines**: ~50 eliminated

#### Task 3.1.1: Create Regex Utilities
- [ ] Create `sotd/utils/regex_utils.py` with common regex patterns
- [ ] Extract common pattern matching logic from enrichers
- [ ] Add comprehensive unit tests for regex utilities
- [ ] Run quality checks and commit

#### Task 3.1.2: Create Validation Utilities
- [ ] Create `sotd/utils/validation_utils.py` with common validation logic
- [ ] Extract common validation patterns from across codebase
- [ ] Add comprehensive unit tests for validation utilities
- [ ] Run quality checks and commit

#### Task 3.1.3: Update Enrichers to Use Utilities
- [ ] Update all enrichers to use new regex and validation utilities
- [ ] Remove duplicated pattern matching code
- [ ] Add integration tests for updated enrichers
- [ ] Run quality checks and commit

### Chunk 3.2: Optimize Brush Strategies
**Priority**: LOW | **Risk**: LOW | **Estimated Lines**: ~50 eliminated

#### Task 3.2.1: Extract Common Pattern Logic
- [ ] Create `sotd/match/brush_matching_strategies/utils/pattern_utils.py`
- [ ] Extract common pattern compilation and matching logic
- [ ] Add comprehensive unit tests for pattern utilities
- [ ] Run quality checks and commit

#### Task 3.2.2: Update Brush Strategies
- [ ] Update brush strategies to use new pattern utilities
- [ ] Remove duplicated pattern matching code
- [ ] Add integration tests for updated strategies
- [ ] Run quality checks and commit

## Quality Assurance and Testing

### Integration Testing Strategy
- [ ] Create integration tests for each refactored module
- [ ] Ensure all existing functionality is preserved
- [ ] Test edge cases and error conditions
- [ ] Verify performance characteristics are maintained

### Documentation Updates
- [ ] Update all relevant documentation to reflect refactored APIs
- [ ] Create migration guides for any breaking changes
- [ ] Update examples and tutorials
- [ ] Document new utility functions and base classes

### Performance Validation
- [ ] Run performance benchmarks before and after refactoring
- [ ] Ensure no performance regressions
- [ ] Validate memory usage patterns
- [ ] Test with large datasets

## Success Criteria

### Code Quality Metrics
- [ ] Eliminate target of 800-1000 lines of duplicated code
- [ ] Maintain or improve test coverage (target: >90%)
- [ ] All quality checks pass consistently
- [ ] No new linting errors introduced

### Functionality Validation
- [ ] All existing pipeline phases work correctly
- [ ] All CLI commands function as expected
- [ ] All analysis tools produce correct results
- [ ] Performance monitoring works across all phases

### Maintainability Improvements
- [ ] Single source of truth for common patterns
- [ ] Consistent error handling across modules
- [ ] Standardized validation and file I/O operations
- [ ] Clear separation of concerns

## Risk Mitigation

### Rollback Strategy
- [ ] Maintain git history with logical commits
- [ ] Each chunk is independently revertible
- [ ] Comprehensive test coverage prevents regressions
- [ ] Integration tests catch breaking changes early

### Testing Strategy
- [ ] Unit tests for all new utilities and base classes
- [ ] Integration tests for all refactored modules
- [ ] End-to-end tests for complete pipeline workflows
- [ ] Performance regression testing

## Session Notes

### Session 1: [Date] - Phase 1 Planning
- Created comprehensive refactoring plan
- Identified high-impact, low-risk opportunities
- Established TDD approach with incremental changes
- Set up quality assurance framework

### Session 2: [Date] - Chunk 1.2 Implementation (PARTIAL)
- **COMPLETED**: Created `sotd/cli_utils/date_span.py` with common date parsing logic
- **COMPLETED**: Refactored aggregate CLI with proper structure and `month_span` utility
- **COMPLETED**: Enhanced main pipeline CLI with flexible phase range parsing
- **NEXT**: Complete `BaseCLIParser` implementation and refactor remaining phase CLIs
- **NEXT**: Add integration tests for aggregate CLI

### Session 3: [Date] - Chunk 1.2 Implementation (CONTINUED)
- **COMPLETED**: All tasks in Chunk 1.2.2 (Refactor Aggregate CLI) are now complete
- **COMPLETED**: All tasks in Chunk 1.2.9 (Enhance Main Pipeline CLI) are complete
- **COMPLETED**: Task 1.2.1 partially complete (date_span.py created, base_parser.py pending)
- **CURRENT STATUS**: Ready to complete Task 1.2.1 (BaseCLIParser) and move to integration tests
- **NEXT**: Complete BaseCLIParser implementation, then add integration tests for aggregate CLI
- **NEXT**: Begin refactoring remaining phase CLIs (Match, Extract, Enrich, Fetch, Report)

### Session 4: [Date] - Chunk 1.2 Implementation (CONTINUED)
- **COMPLETED**: Task 1.2.4 (Refactor Extract CLI) - All tasks complete
- **COMPLETED**: Created `sotd/extract/cli.py` with standardized argument parsing
- **COMPLETED**: Updated `sotd/extract/run.py` to use new CLI module and removed duplicated code
- **COMPLETED**: Added comprehensive tests for extract CLI functionality
- **COMPLETED**: Fixed BaseCLIParser validation logic for start/end arguments
- **COMPLETED**: All quality checks passing
- **NEXT**: Task 1.2.5 (Refactor Enrich CLI)
- **NEXT**: Continue with remaining phase CLIs (Enrich, Fetch, Report)

### Session 5: [Date] - Chunk 1.2 Implementation (COMPLETED)
- **COMPLETED**: Task 1.2.1 (Create Base CLI Parser) - All tasks complete
- **COMPLETED**: Task 1.2.5 (Refactor Enrich CLI) - All tasks complete
- **COMPLETED**: Task 1.2.6 (Refactor Fetch CLI) - All tasks complete
- **COMPLETED**: Created comprehensive BaseCLIParser with common argument patterns and validation
- **COMPLETED**: Standardized all phase CLIs to use BaseCLIParser consistently
- **COMPLETED**: Added integration tests for all refactored CLIs
- **COMPLETED**: All quality checks passing
- **CURRENT STATUS**: Chunk 1.2 (CLI Standardization) is now COMPLETE
- **NEXT**: Begin Chunk 1.1 (Performance Monitoring unification) or Chunk 1.3 (File I/O consolidation)

### Session 6: [Date] - Chunk 1.2 Implementation (CONTINUED)
- **COMPLETED**: Task 1.2.7 (Refactor Report CLI) - All tasks complete
- **COMPLETED**: Created `sotd/report/cli.py` with standardized argument parsing using BaseCLIParser
- **COMPLETED**: Refactored `sotd/report/run.py` to use new CLI module and removed duplicated code
- **COMPLETED**: Enhanced BaseCLIParser to default to current month when no date arguments provided (for all phases)
- **COMPLETED**: Added comprehensive tests for report CLI functionality including validation logic
- **COMPLETED**: Updated report CLI validation to only support single month processing (no year/range/start-end)
- **COMPLETED**: All quality checks passing
- **CURRENT STATUS**: Task 1.2.7 (Refactor Report CLI) is now COMPLETE
- **NEXT**: Task 1.2.8 (Refactor Analysis Tools) or Task 1.2.3 (Refactor Match CLI - if not already complete)

### Session 7: [Date] - Chunk 1.2 Implementation (FINAL)
- **COMPLETED**: Task 1.2.3 (Refactor Match CLI) - All tasks complete
- **COMPLETED**: Updated `sotd/match/run.py` to use `BaseCLIParser` with default current month behavior
- **COMPLETED**: Removed duplicated argument parsing code from match CLI
- **COMPLETED**: Kept only match-specific arguments (mode, parallel, max-workers)
- **COMPLETED**: Added comprehensive integration tests for match CLI functionality
- **COMPLETED**: All match CLI tests now pass, confirming full refactoring completion
- **COMPLETED**: Task 1.2.7 (Refactor Report CLI) was already complete from previous session
- **CURRENT STATUS**: Chunk 1.2 (CLI Standardization) is now FULLY COMPLETE
- **CURRENT STATUS**: All phase CLIs (Aggregate, Match, Extract, Enrich, Fetch, Report) now use BaseCLIParser consistently
- **CURRENT STATUS**: BaseCLIParser defaults to current month when no date arguments provided for all phases
- **NEXT**: Task 1.2.8 (Refactor Analysis Tools) or begin Chunk 1.1 (Performance Monitoring unification)

## Next Steps

1. **IMMEDIATE**: Begin Chunk 1.1 (Performance Monitoring unification)
2. **NEXT**: Complete remaining CLI tasks (Tasks 1.2.3, 1.2.7, 1.2.8)
3. **FUTURE**: Begin Chunk 1.3 (File I/O consolidation) after performance monitoring
4. Follow TDD approach: write tests first, then implementation
5. Run quality checks after each task
6. Commit changes with clear, descriptive messages
7. Update this plan as work progresses
8. Document any issues or deviations from plan

## Dependencies

- All refactoring depends on comprehensive test coverage
- CLI refactoring depends on base parser implementation
- File I/O refactoring depends on unified utilities
- Aggregator refactoring depends on base aggregator implementation
- Table generator refactoring depends on enhanced base classes 